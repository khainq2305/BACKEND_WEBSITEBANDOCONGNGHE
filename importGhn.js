/**
 * GHN ‚ûú providerprovinces / providerdistricts / providerwards
 * -----------------------------------------------------------
 * .env c·∫ßn: DB_HOST DB_PORT DB_USER DB_PASS DB_NAME GHN_TOKEN
 * Ch·∫°y: node importGhn.js
 */
require('dotenv').config();
const axios = require('axios');
const mysql = require('mysql2/promise');
const { search } = require('fast-fuzzy');
const util = require('util'); // Th√™m d√≤ng n√†y ƒë·ªÉ in object s√¢u h∆°n

const TOKEN = process.env.GHN_TOKEN;
const PROVIDER_ID = 1; // GHN id

/* ---------- helpers ---------- */
const deAccent = t => t.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
const stripProv = t => t
  .replace(/^(T·ªânh|Tinh)\s+/i, '')
  .replace(/^(Th√†nh ph·ªë|Thanh pho|TP)\s+/i, '');
const stripDist = t => t
  .replace(/^(Qu·∫≠n|Quan|Huy·ªán|Huyen|Th·ªã x√£|Thi xa|TP|TX)\s+/i, '');
const stripWard = t => t
  .replace(/^(Ph∆∞·ªùng|Phuong|X√£|Xa|Th·ªã tr·∫•n|Thi tran)\s+/i, '');
const norm = t => deAccent(stripDist(stripProv(stripWard(t || ''))))
  .replace(/[^\w\s]/g, ' ')
  .replace(/\s+/g, ' ')
  .trim()
  .toLowerCase();

/* ---------- main ---------- */
(async () => {
  const db = await mysql.createConnection({
    host: process.env.DB_HOST,
    port: +process.env.DB_PORT || 3306,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME,
    charset: 'utf8mb4',
  });

  const [provs] = await db.query('SELECT id, name FROM provinces');
  const [dists] = await db.query('SELECT id, name, provinceId FROM districts');
  const [wards] = await db.query('SELECT id, name, districtId FROM wards');
  const provMap = new Map(); // Kh·ªüi t·∫°o map ƒë·ªÉ ƒëi·ªÅn sau
  const dbProvIdToNameMap = new Map(provs.map(p => [p.id, norm(p.name)]));

  // TH√äM LOG ƒê·ªÇ G·ª† L·ªñI NORM() T·ª™ DB CHO "TH·ª™A THI√äN HU·∫æ"
  for (const p of provs) {
      const normalizedDbName = norm(p.name);
      provMap.set(normalizedDbName, p.id);
      if (p.name.includes('Th·ª´a Thi√™n Hu·∫ø') || p.name.includes('Hu·∫ø')) { // L·ªçc ƒë√∫ng t·ªânh c·∫ßn debug
         
      }
  }
  
  const distByProvDbId = dists.reduce((m, d) => {
    (m[d.provinceId] = (m[d.provinceId] || [])).push({ ...d, n: norm(d.name) });
    return m;
  }, {});

  const wardByDistDbId = wards.reduce((m, w) => {
    (m[w.districtId] = (m[w.districtId] || [])).push({ ...w, n: norm(w.name) });
    return m;
  }, {});


  /* 2Ô∏è‚É£ L·∫•y d·ªØ li·ªáu Provinces t·ª´ GHN */
  let ghnProvinces = [];
  try {
    const { data: { data: fetchedGhnProvinces } } = await axios.get(
      'https://online-gateway.ghn.vn/shiip/public-api/master-data/province',
      { headers: { Token: TOKEN } }
    );
    ghnProvinces = fetchedGhnProvinces;
  } catch (error) {
    console.error('‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu t·ªânh t·ª´ GHN API:', error.message);
    if (error.response) {
      console.error('Ph·∫£n h·ªìi l·ªói GHN:', error.response.status, error.response.data);
    }
    db.end();
    return;
  }

  /* 3Ô∏è‚É£ Duy·ªát t·ª´ng Province c·ªßa GHN */
  for (const p of ghnProvinces) {
    const normalizedGhnName = norm(p.ProvinceName); // TH√äM D√íNG N√ÄY ƒê·ªÇ L·∫§Y T√äN GHN ƒê√É CHU·∫®N H√ìA

    // TH√äM LOG ƒê·ªÇ G·ª† L·ªñI NORM() T·ª™ GHN CHO "TH·ª™A THI√äN HU·∫æ"
    if (p.ProvinceName.includes('Th·ª´a Thi√™n Hu·∫ø') || p.ProvinceName.includes('Hu·∫ø')) { // L·ªçc ƒë√∫ng t·ªânh c·∫ßn debug
        console.log(`[DEBUG NORM GHN] T√™n g·ªëc GHN: "${p.ProvinceName}" -> Chu·∫©n h√≥a GHN: "${normalizedGhnName}"`);
    }

    const dbProvId = provMap.get(normalizedGhnName); // S·ª≠ d·ª•ng t√™n GHN ƒë√£ chu·∫©n h√≥a ƒë·ªÉ tra c·ª©u

    if (!dbProvId) {
        console.warn(`‚ö†Ô∏è T·ªânh GHN "${p.ProvinceName}" (GHN ID: ${p.ProvinceID}) kh√¥ng t√¨m th·∫•y ID kh·ªõp theo T√äN trong DB c·ªßa b·∫°n. B·ªè qua t·ªânh n√†y.`);
        console.log(`   -> Normalized GHN name: "${normalizedGhnName}"`); // In ra t√™n ƒë√£ chu·∫©n h√≥a c·ªßa GHN
        // Th√™m log ƒë·ªÉ ki·ªÉm tra xem c√≥ t√™n n√†o g·∫ßn gi·ªëng trong DB kh√¥ng
        for (const key of provMap.keys()) {
            if (key.includes('thua thien') || key.includes('hue')) {
                console.log(`   -> T√™n g·∫ßn gi·ªëng trong DB: "${key}"`);
            }
        }
        continue;
    }

    await db.execute(
      `REPLACE INTO providerprovinces
         (providerId, provinceId, providerProvinceCode, providerProvinceName)
         VALUES (?, ?, ?, ?)`,
      [PROVIDER_ID, dbProvId, p.ProvinceID, p.ProvinceName]
    );

    /* 4Ô∏è‚É£ L·∫•y d·ªØ li·ªáu Districts t·ª´ GHN */
    let ghnDistsForProv = [];
    try {
      const response = await axios.post(
        'https://online-gateway.ghn.vn/shiip/public-api/master-data/district',
        { province_id: p.ProvinceID },
        { headers: { Token: TOKEN } }
      );
      if (response.data && Array.isArray(response.data.data)) {
          ghnDistsForProv = response.data.data;
      } else {
          console.warn(`‚ö†Ô∏è GHN Districts API tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng mong mu·ªën cho t·ªânh ${p.ProvinceID} (${p.ProvinceName}). D·ªØ li·ªáu:`, util.inspect(response.data, { depth: null }));
          ghnDistsForProv = [];
      }
    } catch (error) {
      console.error(`‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu huy·ªán cho t·ªânh ${p.ProvinceName} (GHN ID: ${p.ProvinceID}) t·ª´ GHN API:`, error.message);
      if (error.response) {
        console.error('Ph·∫£n h·ªìi l·ªói GHN (full):', util.inspect(error.response.data, { depth: null }));
        console.error('Status:', error.response.status);
      }
      ghnDistsForProv = [];
      continue;
    }

    const intDists = distByProvDbId[dbProvId] || [];
    if (!intDists.length) {
      console.warn(`‚õî T·ªânh ${p.ProvinceName} (DB ID: ${dbProvId}) kh√¥ng c√≥ huy·ªán n·ªôi b·ªô. (ƒê√¢y l√† l·ªói n·∫øu b·∫°n ch·∫Øc ch·∫Øn DB c√≥ huy·ªán cho t·ªânh n√†y)`);
      continue;
    }

    const distNorm = intDists.map(x => x.n);

    for (const d of ghnDistsForProv) {
      const FUZZY_DISTRICT_THRESHOLD = 0.55;
      const matchArr = search(norm(d.DistrictName), distNorm, { returnMatchData: true });
      const m = matchArr[0] || {};

      if ((m.score || 0) < FUZZY_DISTRICT_THRESHOLD) {
        // console.log(`  ‚Ä¢ Kh√¥ng kh·ªõp huy·ªán: GHN "${d.DistrictName}" (ID:${d.DistrictID}) ‚Üí kh·ªõp DB "${m.item || 'N/A'}" (ƒêi·ªÉm: ${m.score || 0})`);
        continue;
      }

      const distIdx = distNorm.indexOf(m.item);
      const dbDistId = intDists[distIdx]?.id;
      if (!dbDistId) {
        // console.log(`  ‚Ä¢ T√¨m th·∫•y kh·ªõp "${d.DistrictName}" ‚Üí "${m.item}" nh∆∞ng dbDistId undefined trong DB.`);
        continue;
      }

      await db.execute(
        `REPLACE INTO providerdistricts
           (providerId, districtId, providerDistrictCode, providerDistrictName, provinceId)
           VALUES (?, ?, ?, ?, ?)`,
        [PROVIDER_ID, dbDistId, d.DistrictID, d.DistrictName, dbProvId]
      );

      const intWards = wardByDistDbId[dbDistId] || [];
      const wardNorm = intWards.map(x => x.n);
      const batch = [];
      const FUZZY_WARD_THRESHOLD = 0.55;

      /* 5Ô∏è‚É£ L·∫•y d·ªØ li·ªáu Wards (x√£/ph∆∞·ªùng) t·ª´ GHN */
      let ghnWardsForDist = [];
      try {
        const response = await axios.post(
          'https://online-gateway.ghn.vn/shiip/public-api/master-data/ward',
          { district_id: d.DistrictID },
          { headers: { Token: TOKEN } }
        );
        if (response.data && Array.isArray(response.data.data)) {
            ghnWardsForDist = response.data.data;
        } else {
            console.warn(`‚ö†Ô∏è GHN Wards API tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng mong mu·ªën cho huy·ªán ${d.DistrictID} (${d.DistrictName}). D·ªØ li·ªáu:`, util.inspect(response.data, { depth: null }));
            ghnWardsForDist = [];
        }
      } catch (error) {
        console.error(`‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu x√£/ph∆∞·ªùng cho huy·ªán ${d.DistrictID} (${d.DistrictName}) t·ª´ GHN API:`, error.message);
        if (error.response) {
          console.error('Ph·∫£n h·ªìi l·ªói GHN (full):', util.inspect(error.response.data, { depth: null }));
          console.error('Status:', error.response.status);
        }
        ghnWardsForDist = [];
        continue;
      }

      for (const w of ghnWardsForDist) {
        const m2 = search(norm(w.WardName), wardNorm, { returnMatchData: true })[0] || {};
        if ((m2.score || 0) < FUZZY_WARD_THRESHOLD) {
          // console.log(`    ‚Ä¢ Kh√¥ng kh·ªõp x√£/ph∆∞·ªùng: GHN "${w.WardName}" (Code:${w.WardCode}) ‚Üí kh·ªõp DB "${m2.item || 'N/A'}" (ƒêi·ªÉm: ${m2.score || 0})`);
          continue;
        }

        const wardIdx = wardNorm.indexOf(m2.item);
        const dbWardId = intWards[wardIdx]?.id;
        if (!dbWardId) {
          // console.log(`    ‚Ä¢ T√¨m th·∫•y kh·ªõp x√£/ph∆∞·ªùng "${w.WardName}" ‚Üí "${m2.item}" nh∆∞ng dbWardId undefined trong DB.`);
          continue;
        }

        batch.push([
          PROVIDER_ID,
          dbWardId,
          w.WardCode,
          w.WardName,
          dbDistId
        ]);
      }

      if (batch.length) {
        await db.query(
          `REPLACE INTO providerwards
             (providerId, wardId, providerWardCode, providerWardName, districtId)
             VALUES ?`,
          [batch]
        );
      }
    }
  }

  console.timeEnd('‚è≥ GHN import');

  /* th·ªëng k√™ */
  const [[pc]] = await db.query('SELECT COUNT(*) c FROM providerprovinces');
  const [[dc]] = await db.query('SELECT COUNT(*) c FROM providerdistricts');
  const [[wc]] = await db.query('SELECT COUNT(*) c FROM providerwards');
  console.log(`üéØ ${pc.c} t·ªânh | ${dc.c} huy·ªán | ${wc.c} x√£`);

  db.end();
})();
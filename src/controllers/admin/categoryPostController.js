const { Post, Category, User } = require('../../models'); // ‚úÖ GI·ªú m·ªõi ƒë√∫ng 100%
const { Sequelize } = require('sequelize');
const { Op } = require('sequelize');

class CategoryController {
  // [CREATE] Th√™m b√†i vi·∫øt
  static async create(req, res) {
    try {
      const {
        name,
        description = '',
        slug,
        parentId = null,
        isActive,
        orderIndex = 0,
        isDefault = false,
      } = req.body;

      // ‚ùå KH√îNG c·∫ßn check tr√πng t√™n ·ªü ƒë√¢y n·ªØa, middleware x·ª≠ l√Ω r·ªìi
      if (!name) {
        return res.status(400).json({ message: 'T√™n danh m·ª•c l√† b·∫Øt bu·ªôc' });
      }

      const newCategory = await Category.create({
        name,
        slug,
        description,
        parentId,
        isActive,
        orderIndex,
        isDefault,
      });
      console.log('üì¶ D·ªØ li·ªáu t·∫°o category:', {
        name,
        slug,
        description,
        parentId,
        isActive,
        orderIndex,
        isDefault
      });

      return res.status(201).json({ message: 'T·∫°o danh m·ª•c th√†nh c√¥ng', data: newCategory });
    } catch (error) {
      console.error('CREATE CATEGORY ERROR:', error);
      return res.status(500).json({ message: 'L·ªói server khi t·∫°o danh m·ª•c' });
    }
  }

  static async getBySlug(req, res) {
    try {
      const { slug } = req.params;

      const category = await Category.findOne({ where: { slug } });

      if (!category) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' });
      }

      return res.json({ data: category });
    } catch (error) {
      console.error('GET CATEGORY BY SLUG ERROR:', error);
      return res.status(500).json({ message: 'L·ªói server khi l·∫•y danh m·ª•c' });
    }
  }


  // [READ] L·∫•y danh s√°ch b√†i vi·∫øt
  static async getAll(req, res) {
    try {
      const { search = '', status = '', categoryId = '' } = req.query;
      console.log(req.query)

      const { page, limit, offset } = req.pagination;


      const whereClause = {};

      if (search) {
        whereClause.name = { [Op.like]: `%${search}%` };
      }
      if (status === 'trash') {
        whereClause.deletedAt = { [Op.not]: null };
      } else {
        whereClause.deletedAt = null;

        if (status === 'published') {
          whereClause.isActive = true;
        } else if (status === 'draft') {
          whereClause.isActive = false;
        }
      }

      if (categoryId) {
        whereClause.parentId = Number(categoryId);
      }

      // ‚úÖ Truy v·∫•n ch√≠nh: l·∫•y categories (kh√¥ng ƒë·∫øm post t·∫°i ƒë√¢y)
      const { count, rows } = await Category.findAndCountAll({
        where: whereClause,
        limit,
        offset,
        order: [['createdAt', 'DESC']],
        paranoid: false
      });

      // ‚úÖ ƒê·∫øm s·ªë b√†i vi·∫øt theo categoryId
      const postCounts = await Post.findAll({
        attributes: [
          'categoryId',
          [Sequelize.fn('COUNT', Sequelize.col('id')), 'total']
        ],
        group: ['categoryId'],
        raw: true,
        paranoid: false
      });

      // ‚úÖ Map: { categoryId: total }
      const postCountMap = Object.fromEntries(
        postCounts.map(p => [p.categoryId, Number(p.total)])
      );

      // ‚úÖ G·ªôp v√†o rows
      const enrichedRows = rows.map(c => ({
        ...c.toJSON(),
        postCount: postCountMap[c.id] || 0
      }));




      // üëá T√≠nh s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i danh m·ª•c (bao g·ªìm c·∫£ x√≥a m·ªÅm)
      const allCategories = await Category.findAll({ paranoid: false });

      const counts = {
        all: allCategories.filter(c => !c.deletedAt).length,
        published: allCategories.filter(c => c.isActive === true && !c.deletedAt).length,
        draft: allCategories.filter(c => c.isActive === false && !c.deletedAt).length,
        trash: allCategories.filter(c => c.deletedAt).length
      };


      return res.json({
        data: enrichedRows,
        total: count,
        page,
        totalPages: Math.ceil(count.length / limit),
        counts
      });

    } catch (error) {
      console.error('GET CATEGORIES ERROR:', error);
      return res.status(500).json({ message: 'L·ªói server khi l·∫•y danh m·ª•c' });
    }
  }



  static async update(req, res) {
    try {
      const { slug } = req.params; // üëà l·∫•y slug t·ª´ URL
      const {
        name,
        description = '',
        parentId = null,
        isActive = true,
        orderIndex = 0,
        isDefault = false
      } = req.body;

      if (!slug) {
        return res.status(400).json({ message: 'Slug l√† b·∫Øt bu·ªôc ƒë·ªÉ c·∫≠p nh·∫≠t' });
      }

      const category = await Category.findOne({ where: { slug } });

      if (!category) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi slug n√†y' });
      }

      // C·∫≠p nh·∫≠t
      await category.update({
        name,
        description,
        parentId,
        isActive,
        orderIndex,
        isDefault
      });

      return res.json({ message: 'C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng', data: category });
    } catch (error) {
      console.error('UPDATE CATEGORY ERROR:', error);
      return res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t danh m·ª•c' });
    }
  }
  static async trashBySlug(req, res) {
    try {
      const { slugs } = req.body;

      if (!Array.isArray(slugs) || slugs.length === 0) {
        return res.status(400).json({ message: 'Danh s√°ch slug kh√¥ng h·ª£p l·ªá' });
      }

      const result = await Category.update(
        { deletedAt: new Date() },
        {
          where: {
            slug: slugs
          }
        }
      );

      return res.json({ message: `ƒê√£ x√≥a m·ªÅm ${result[0]} danh m·ª•c.` });
    } catch (error) {
      console.error('TRASH CATEGORY BY SLUG ERROR:', error);
      return res.status(500).json({ message: 'L·ªói server khi x√≥a m·ªÅm danh m·ª•c' });
    }
  }
  // controllers/postController.js
  static async restoreBySlug(req, res) {
    try {
      const { slugs } = req.body;

      if (!Array.isArray(slugs) || slugs.length === 0) {
        return res.status(400).json({ message: 'Danh s√°ch slug kh√¥ng h·ª£p l·ªá' });
      }

      const result = await Category.update(
        { deletedAt: null },
        {
          where: {
            slug: slugs
          },
          paranoid: false // c·∫ßn c√≥ ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£n ghi ƒë√£ b·ªã x√≥a m·ªÅm
        }
      );

      return res.json({ message: `ƒê√£ kh√¥i ph·ª•c ${result[0]} danh m·ª•c.` });
    } catch (error) {
      console.error('RESTORE CATEGORY BY SLUG ERROR:', error);
      return res.status(500).json({ message: 'L·ªói server khi kh√¥i ph·ª•c danh m·ª•c' });
    }
  }


  static async getPostCountsByCategory(req, res) {
    try {
      const result = await Category.findAll({
        attributes: [
          'id',
          'name',
          [Sequelize.fn('COUNT', Sequelize.col('Posts.id')), 'postCount']
        ],
        include: [
          {
            model: Post,
            attributes: [],
            where: {
              deletedAt: null // Ch·ªâ t√≠nh b√†i ch∆∞a b·ªã xo√° m·ªÅm
            },
            required: false
          }
        ],
        group: ['Category.id'],
        raw: true
      });

      return res.json({ data: result });
    } catch (error) {
      console.error('L·ªói khi l·∫•y t·ªïng b√†i vi·∫øt theo danh m·ª•c:', error);
      return res.status(500).json({ message: 'L·ªói server khi th·ªëng k√™ b√†i vi·∫øt' });
    }
  }

}
module.exports = CategoryController

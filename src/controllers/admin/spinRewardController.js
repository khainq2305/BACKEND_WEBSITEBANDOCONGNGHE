const { Op, Sequelize } = require('sequelize');
const { SpinReward, Coupon } = require('../../models');

class SpinRewardController {
  // üìå L·∫•y danh s√°ch ph·∫ßn th∆∞·ªüng
  static async getAll(req, res) {
    try {
      const { page = 1, limit = 10, search = '', status = 'all' } = req.query;
      const offset = (page - 1) * limit;

      let whereClause = {};

      // üîé T√¨m theo t√™n
      if (search) {
        whereClause.name = { [Op.like]: `%${search}%` };
      }

      // üìå L·ªçc theo tr·∫°ng th√°i
      if (status === 'active') {
        whereClause.isActive = true;
      } else if (status === 'inactive') {
        whereClause.isActive = false;
      } else if (status !== 'all') {
        return res.status(400).json({ message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
      }

      // üìå L·∫•y danh s√°ch reward (bao g·ªìm c·∫£ coupon null ho·∫∑c h·∫øt h·∫°n)
      const { rows: data, count: total } = await SpinReward.findAndCountAll({
        where: whereClause,
        include: [
          {
            model: Coupon,
            as: 'coupon',
            attributes: [
              'id',
              'code',
              'startTime',
              'endTime',
              'totalQuantity',
              'usedCount'
            ],
            required: false, // cho ph√©p reward kh√¥ng c√≥ coupon
          }
        ],
        limit: parseInt(limit),
        offset: parseInt(offset),
        order: [['createdAt', 'DESC']],
      });

      // üìä ƒê·∫øm ri√™ng t·ª´ng tr·∫°ng th√°i cho badge tab
      const [totalAll, totalActive, totalInactive] = await Promise.all([
        SpinReward.count(),
        SpinReward.count({ where: { isActive: true } }),
        SpinReward.count({ where: { isActive: false } }),
      ]);

      return res.json({
        success: true,
        data,
        total,
        currentPage: Number(page),
        totalPages: Math.ceil(total / limit),
        counts: {
          all: totalAll,
          active: totalActive,
          inactive: totalInactive,
        },
      });
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch ph·∫ßn th∆∞·ªüng:', error);
      return res.status(500).json({ message: 'L·ªói server', error });
    }
  }


  // üìå L·∫•y 1 reward theo id
  static async getById(req, res) {
    try {
      const reward = await SpinReward.findByPk(req.params.id, {
        attributes: ['id', 'name', 'couponId', 'probability', 'isActive'],
        include: [
          {
            model: Coupon,
            as: 'coupon',
            attributes: [
              'id',
              'code',
              'startTime',
              'endTime',
              'totalQuantity',
              'usedCount'
            ]
          }
        ],
      });

      if (!reward) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ph·∫ßn th∆∞·ªüng' });
      return res.json({ data: reward });
    } catch (error) {
      return res.status(500).json({ message: 'L·ªói server' });
    }
  }

  // üìå T·∫°o reward m·ªõi
  static async create(req, res) {
    try {
      const { probability, couponId } = req.body;

      // 1. Check probability range
      if (probability < 0 || probability > 100) {
        return res.status(400).json({ message: "T·ªâ l·ªá ph·∫£i n·∫±m trong kho·∫£ng 0% - 100%" });
      }

      // 2. T√≠nh t·ªïng probability hi·ªán c√≥
      const total = await SpinReward.sum("probability");

      // 3. N·∫øu c·ªông th√™m > 100 th√¨ b√°o l·ªói
      if ((total || 0) + probability > 100) {
        return res.status(400).json({
          message: `T·ªïng t·ªâ l·ªá hi·ªán t·∫°i l√† ${total}%. Th√™m ${probability}% s·∫Ω v∆∞·ª£t qu√° 100%. H√£y gi·∫£m t·ªâ l·ªá ph·∫ßn th∆∞·ªüng kh√°c tr∆∞·ªõc khi th√™m m·ªõi.`
        });
      }

      // 4. N·∫øu c√≥ couponId ‚Üí ki·ªÉm tra c√≤n h·∫°n & c√≤n l∆∞·ª£t
      if (couponId) {
        const now = new Date();
        const coupon = await Coupon.findByPk(couponId);

        if (!coupon) {
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y coupon" });
        }

        if (coupon.startTime && coupon.startTime > now) {
          return res.status(400).json({ message: "Coupon ch∆∞a ƒë·∫øn th·ªùi gian b·∫Øt ƒë·∫ßu" });
        }

        if (coupon.endTime && coupon.endTime <= now) {
          return res.status(400).json({ message: "Coupon ƒë√£ h·∫øt h·∫°n" });
        }

        if (coupon.usedCount >= coupon.totalQuantity) {
          return res.status(400).json({ message: "Coupon ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng" });
        }
      }

      // 5. T·∫°o ph·∫ßn th∆∞·ªüng
      const newItem = await SpinReward.create(req.body);
      return res.status(201).json({ message: "T·∫°o th√†nh c√¥ng", data: newItem });
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o ph·∫ßn th∆∞·ªüng:", error);
      return res.status(500).json({ message: "L·ªói server khi t·∫°o ph·∫ßn th∆∞·ªüng" });
    }
  }

  // üìå C·∫≠p nh·∫≠t reward
  static async update(req, res) {
    try {
      const id = req.params.id;
      const item = await SpinReward.findByPk(id);
      if (!item) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph·∫ßn th∆∞·ªüng" });

      const { probability, couponId } = req.body;

      // Ki·ªÉm tra range
      if (probability < 0 || probability > 100) {
        return res.status(400).json({ message: "T·ªâ l·ªá ph·∫£i n·∫±m trong kho·∫£ng 0% - 100%" });
      }

      // T√≠nh t·ªïng tr·ª´ ƒëi reward hi·ªán t·∫°i
      const total = await SpinReward.sum("probability", {
        where: { id: { [Op.ne]: id } }
      });

      if ((total || 0) + probability > 100) {
        return res.status(400).json({
          message: `T·ªïng t·ªâ l·ªá hi·ªán t·∫°i (kh√¥ng t√≠nh reward n√†y) l√† ${total}%. C·∫≠p nh·∫≠t ${probability}% s·∫Ω v∆∞·ª£t qu√° 100%.`
        });
      }

      // N·∫øu c√≥ couponId ‚Üí ki·ªÉm tra c√≤n h·∫°n & c√≤n l∆∞·ª£t
      if (couponId) {
        const now = new Date();
        const coupon = await Coupon.findByPk(couponId);

        if (!coupon) {
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y coupon" });
        }

        if (coupon.startTime && coupon.startTime > now) {
          return res.status(400).json({ message: "Coupon ch∆∞a ƒë·∫øn th·ªùi gian b·∫Øt ƒë·∫ßu" });
        }

        if (coupon.endTime && coupon.endTime <= now) {
          return res.status(400).json({ message: "Coupon ƒë√£ h·∫øt h·∫°n" });
        }

        if (coupon.usedCount >= coupon.totalQuantity) {
          return res.status(400).json({ message: "Coupon ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng" });
        }
      }

      await item.update(req.body);
      return res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", data: item });
    } catch (error) {
      return res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t ph·∫ßn th∆∞·ªüng" });
    }
  }

  // üìå Xo√° reward
  static async remove(req, res) {
    try {
      const id = req.params.id;
      const item = await SpinReward.findByPk(id);
      if (!item) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph·∫ßn th∆∞·ªüng" });

      await item.destroy();
      return res.json({ message: "Xo√° th√†nh c√¥ng" });
    } catch (error) {
      return res.status(500).json({ message: "L·ªói server khi xo√° ph·∫ßn th∆∞·ªüng" });
    }
  }
}

module.exports = SpinRewardController;

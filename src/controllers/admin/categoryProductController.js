const Category = require("../../models/categoryModel");
const { Op } = require("sequelize");

class CategoryProductController {
  static async getAll(req, res) {
    try {
      const page = parseInt(req.query.page, 10) || 1;
      const limit = parseInt(req.query.limit, 10) || 10;
      const offset = (page - 1) * limit;

      const search = req.query.search?.trim() || "";
      const isActive = req.query.isActive;
      const isDeleted = req.query.isDeleted === "true";

      const whereClause = {};

      
      if (isDeleted) {
        whereClause.deletedAt = { [Op.not]: null };
      } else {
        whereClause.deletedAt = null;
      }

      if (search) {
        whereClause.name = { [Op.like]: `%${search}%` };
      }

      if (isActive === "true") {
        whereClause.isActive = true;
      } else if (isActive === "false") {
        whereClause.isActive = false;
      }

      const { rows: data, count: total } = await Category.findAndCountAll({
        where: whereClause,
        limit,
        offset,
      order: [['sortOrder', 'ASC']], 

        paranoid: false,
      });

    
      const [all, active, inactive, trashed] = await Promise.all([
        Category.count({ where: { deletedAt: null }, paranoid: false }),
        Category.count({
          where: { isActive: true, deletedAt: null },
          paranoid: false,
        }),
        Category.count({
          where: { isActive: false, deletedAt: null },
          paranoid: false,
        }),
        Category.count({
          where: { deletedAt: { [Op.not]: null } },
          paranoid: false,
        }),
      ]);

      return res.status(200).json({
        data,
        total,
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        counts: {
          all,
          active,
          inactive,
          trashed,
        },
      });
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch danh m·ª•c:", error);
      res.status(500).json({
        message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch danh m·ª•c",
        error: error.message,
      });
    }
  }

  static async getById(req, res) {
    try {
      const category = await Category.findByPk(req.params.id);
      if (!category) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c." });
      }
      res.status(200).json(category);
    } catch (err) {
      console.error("L·ªói l·∫•y danh m·ª•c:", err);
      res.status(500).json({ message: "L·ªói server!" });
    }
  }

  static async create(req, res) {
    try {
      const {
        name,
        slug,
        description,
        parentId,
        isActive,
        orderIndex,
        isDefault,
      } = req.body;
      const thumbnail = req.file?.path;

      if (!thumbnail) {
        return res
          .status(400)
          .json({ field: "thumbnail", message: "Vui l√≤ng ch·ªçn ·∫£nh ƒë·∫°i di·ªán!" });
      }
      const newCategory = await Category.create({
        name,
        slug,
        description,
        parentId: parentId || null,
        isActive: isActive !== "false",
        orderIndex: Number(orderIndex) || 0,
        isDefault: isDefault === "true" || false,
        thumbnail,
      });

      res.status(201).json(newCategory);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o danh m·ª•c:", err);
      return res
        .status(500)
        .json({ message: "L·ªói server!", error: err.message });
    }
  }

  static async update(req, res) {
    try {
      const category = await Category.findByPk(req.params.id);
      if (!category) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c." });
      }

      const {
        name,
        slug,
        description,
        parentId,
        isActive,
        orderIndex,
        isDefault,
      } = req.body;

      let thumbnail = category.thumbnail;

      if (req.file && req.file.path) {
        thumbnail = req.file.path;
      }

      await category.update({
        name,
        slug,
        description,
        parentId: parentId || null,
        isActive: isActive !== "false",
        orderIndex: Number(orderIndex) || 0,
        isDefault: isDefault === "true" || false,
        thumbnail,
      });

      res.status(200).json(category);
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t danh m·ª•c:", err);
      res.status(500).json({ message: "L·ªói server!", error: err.message });
    }
  }

  static async delete(req, res) {
    try {
      const category = await Category.findByPk(req.params.id);
      if (!category) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c." });
      }

      await category.destroy();
      res.status(200).json({ message: "ƒê√£ x√≥a danh m·ª•c th√†nh c√¥ng." });
    } catch (err) {
      console.error("L·ªói x√≥a danh m·ª•c:", err);
      res.status(500).json({ message: "L·ªói server!" });
    }
  }

  static async forceDeleteMany(req, res) {
    try {
      console.log("üì• Nh·∫≠n body:", req.body);
      const { ids } = req.body;

      if (!Array.isArray(ids) || ids.length === 0) {
        return res.status(400).json({ message: "Danh s√°ch ID kh√¥ng h·ª£p l·ªá" });
      }

      // ‚úÖ Ki·ªÉm tra xem c√≥ b·∫£n ghi n√†o t·ªìn t·∫°i v√† ƒë√£ b·ªã soft delete ch∆∞a
      const toDelete = await Category.findAll({
        where: { id: ids },
        paranoid: false,
      });

      console.log("üîç B·∫£n ghi t√¨m th·∫•y (bao g·ªìm c·∫£ ƒë√£ xo√° m·ªÅm):");
      toDelete.forEach((item) => {
        console.log(`- ID: ${item.id}, deletedAt: ${item.deletedAt}`);
      });

      const deleted = await Category.destroy({
        where: { id: ids },
        force: true,
      });

      res.json({ message: `ƒê√£ xo√° vƒ©nh vi·ªÖn ${deleted} danh m·ª•c` });
    } catch (error) {
      console.error("‚ùå L·ªói xo√° vƒ©nh vi·ªÖn:", error);
      res.status(500).json({ message: "L·ªói server khi xo√° vƒ©nh vi·ªÖn", error });
    }
  }

  static async softDeleteMany(req, res) {
    try {
      const { ids } = req.body;
      console.log("üóëÔ∏è Danh s√°ch c·∫ßn x√≥a m·ªÅm:", ids); // ‚úÖ LOG

      if (!Array.isArray(ids) || ids.length === 0) {
        return res.status(400).json({ message: "Danh s√°ch ID kh√¥ng h·ª£p l·ªá" });
      }

      const deleted = await Category.destroy({
        where: { id: ids },
      });

      console.log(`‚úÖ ƒê√£ soft delete ${deleted} danh m·ª•c`);

      res.json({ message: `ƒê√£ chuy·ªÉn ${deleted} danh m·ª•c v√†o th√πng r√°c` });
    } catch (error) {
      console.error("‚ùå L·ªói xo√° m·ªÅm:", error);
      res.status(500).json({ message: "L·ªói server khi xo√° m·ªÅm", error });
    }
  }

  static async restore(req, res) {
    console.log("üì• ƒê√£ v√†o route kh√¥i ph·ª•c danh m·ª•c");

    try {
      const id = req.params.id;
      console.log("üîç Kh√¥i ph·ª•c ID:", id);

      const category = await Category.findByPk(id, { paranoid: false });

      if (!category) {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y danh m·ª•c ƒë·ªÉ kh√¥i ph·ª•c");
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c." });
      }

      await category.restore();
      res.json({ message: "‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng!" });
    } catch (err) {
      console.error("‚ùå L·ªói kh√¥i ph·ª•c:", err);
      res.status(500).json({ message: "L·ªói server!" });
    }
  }

  static async restoreMany(req, res) {
    try {
      const { ids } = req.body;
      if (!Array.isArray(ids) || ids.length === 0) {
        return res.status(400).json({ message: "Danh s√°ch ID kh√¥ng h·ª£p l·ªá" });
      }

      const restorePromises = ids.map((id) =>
        Category.restore({ where: { id }, paranoid: false })
      );

      await Promise.all(restorePromises);

      res.json({ message: `ƒê√£ kh√¥i ph·ª•c ${ids.length} danh m·ª•c` });
    } catch (error) {
      console.error("‚ùå L·ªói kh√¥i ph·ª•c danh m·ª•c:", error);
      res
        .status(500)
        .json({ message: "L·ªói server khi kh√¥i ph·ª•c danh m·ª•c", error });
    }
  }

  static async forceDelete(req, res) {
    try {
      const { id } = req.params;

      const category = await Category.findByPk(id, { paranoid: false });
      if (!category) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c." });
      }

      await category.destroy({ force: true });

      res.json({ message: "‚úÖ ƒê√£ xo√° vƒ©nh vi·ªÖn danh m·ª•c." });
    } catch (err) {
      console.error("‚ùå L·ªói xo√° vƒ©nh vi·ªÖn:", err);
      res.status(500).json({ message: "L·ªói server!" });
    }
  }

  static async updateOrderIndex(req, res) {
    console.log("üõ†Ô∏è G·ªçi t·ªõi API c·∫≠p nh·∫≠t th·ª© t·ª±");

    const { ordered } = req.body;
    console.log("üì¶ Danh s√°ch nh·∫≠n:", ordered);
    try {
      const { ordered } = req.body;

      if (!Array.isArray(ordered)) {
        return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
      }

      const updatePromises = ordered.map(({ id, orderIndex }) =>
        Category.update({ orderIndex }, { where: { id } })
      );

      await Promise.all(updatePromises);

      return res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th·ª© t·ª± th√†nh c√¥ng" });
    } catch (error) {
      console.error("‚ùå L·ªói updateOrderIndex:", error);
      return res
        .status(500)
        .json({ message: "L·ªói server khi c·∫≠p nh·∫≠t th·ª© t·ª±", error });
    }
  }

  static async restoreAll(req, res) {
    try {
      const restored = await Category.restore({
        where: {
          deletedAt: { [Op.not]: null },
        },
      });

      res.json({
        message: `‚úÖ ƒê√£ kh√¥i ph·ª•c t·∫•t c·∫£ danh m·ª•c (${restored})`,
      });
    } catch (error) {
      console.error("‚ùå L·ªói kh√¥i ph·ª•c t·∫•t c·∫£:", error);
      res.status(500).json({
        message: "L·ªói server khi kh√¥i ph·ª•c t·∫•t c·∫£ danh m·ª•c",
        error,
      });
    }
  }

  static async forceDeleteAll(req, res) {
    try {
      const deleted = await Category.destroy({
        where: {
          deletedAt: { [Op.not]: null },
        },
        force: true,
      });

      res.json({
        message: `‚úÖ ƒê√£ xo√° vƒ©nh vi·ªÖn t·∫•t c·∫£ danh m·ª•c trong th√πng r√°c (${deleted})`,
      });
    } catch (error) {
      console.error("‚ùå L·ªói xo√° vƒ©nh vi·ªÖn t·∫•t c·∫£:", error);
      res.status(500).json({
        message: "L·ªói server khi xo√° vƒ©nh vi·ªÖn t·∫•t c·∫£ danh m·ª•c",
        error,
      });
    }
  }
}

module.exports = CategoryProductController;

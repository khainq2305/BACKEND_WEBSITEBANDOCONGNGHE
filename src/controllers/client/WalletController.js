// src/controllers/WalletController.js
const speakeasy = require("speakeasy");
const QRCode = require("qrcode");
const { Wallet, Withdrawal, WalletTransaction, User } = require("../../models");
const { Op } = require("sequelize");
const bcrypt = require("bcryptjs");
const sendEmail = require("../../utils/sendEmail");

const generateToken = () => Math.floor(100000 + Math.random() * 900000).toString();

class WalletController {
  static async getWallet(req, res) {
  try {
    const userId = req.user.id;

    // ƒë·∫£m b·∫£o c√≥ v√≠
    let wallet = await Wallet.findOne({
      where: { userId },
      attributes: ['id', 'balance', 'pinHash', 'updatedAt'],
    });

    if (!wallet) {
      wallet = await Wallet.create({ userId, balance: 0, pinHash: null });
    }

    // l·∫•y user + c√°c tr∆∞·ªùng 2FA
    const user = await User.findByPk(userId, {
      attributes: [
        'email',
        'walletEmailVerified',
        'wallet2FASecret',
        'wallet2FAStatus',      // <-- c·ªôt m·ªõi
        'wallet2FAEnabledAt',   // <-- c·ªôt m·ªõi (n·∫øu c√≥)
      ],
    });

    // fallback khi ch∆∞a migrate c·ªôt m·ªõi:
    const googleAuthStatus =
      user?.wallet2FAStatus ||
      (user?.wallet2FASecret ? 'active' : 'off'); // n·∫øu ch·ªâ c√≥ secret (code c≈©), t·∫°m coi l√† active

    const hasPin = !!wallet.pinHash;
    const hasGoogleAuth = googleAuthStatus === 'active';

    return res.status(200).json({
      data: {
        id: wallet.id,
        balance: wallet.balance,
        updatedAt: wallet.updatedAt,

        // security
        hasPin,
        hasGoogleAuth,                 // ch·ªâ true khi ACTIVE
        googleAuthStatus,              // 'off' | 'pending' | 'active'
        googleAuthEnabledAt: user?.wallet2FAEnabledAt || null,

        // method ∆∞u ti√™n hi·ªÉn th·ªã
        securityMethod: hasGoogleAuth ? 'google-auth' : (hasPin ? 'pin' : null),

        // info kh√°c
        email: user?.email || null,
        walletEmailVerified: !!user?.walletEmailVerified,
      },
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·ªë d∆∞ v√≠:', error);
    return res.status(500).json({ message: 'L·ªói server' });
  }
}


 

  static async getTransactions(req, res) {
    try {
      const userId = req.user.id;

      const wallet = await Wallet.findOne({ where: { userId } });
      if (!wallet) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y v√≠' });
      }

      const transactions = await WalletTransaction.findAll({
        where: { walletId: wallet.id },
        order: [['createdAt', 'DESC']],
      });

      return res.json({ data: transactions });
    } catch (error) {
      console.error('L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch v√≠:', error);
      return res.status(500).json({ message: 'L·ªói server' });
    }
  }

 

 static async enableGoogleAuth(req, res) {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: ['id', 'email', 'wallet2FASecret', 'wallet2FAStatus'],
    });

    // N·∫øu ƒëang 'active' -> kh√¥ng cho enable l·∫°i
    if (user.wallet2FAStatus === 'active') {
      return res.status(400).json({ message: '2FA ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.' });
    }

    // N·∫øu ƒëang 'pending' v√† ƒë√£ c√≥ secret -> t√°i s·ª≠ d·ª•ng secret c≈©, ph√°t l·∫°i QR
    if (user.wallet2FAStatus === 'pending' && user.wallet2FASecret) {
      const otpauthUrl = speakeasy.otpauthURL({
        secret: user.wallet2FASecret,
        label: `MyApp Wallet (${req.user.email})`,
        issuer: 'MyApp',
        encoding: 'base32',
      });
      const qrCodeDataURL = await QRCode.toDataURL(otpauthUrl);
      return res.json({
        message: 'Qu√©t m√£ QR b·∫±ng Google Authenticator',
        qrCode: qrCodeDataURL,
        secret: user.wallet2FASecret,
        otpauthUrl,
      });
    }

    // T·∫°o secret m·ªõi
    const secret = speakeasy.generateSecret({
      name: `MyApp Wallet (${req.user.email})`, // label hi·ªÉn th·ªã trong app
      issuer: 'MyApp',
      length: 20,
    });

    await user.update({
      wallet2FASecret: secret.base32,
      wallet2FAStatus: 'pending',
      wallet2FAEnabledAt: null,
    });

    const qrCodeDataURL = await QRCode.toDataURL(secret.otpauth_url);

    return res.json({
      message: 'Qu√©t m√£ QR b·∫±ng Google Authenticator',
      qrCode: qrCodeDataURL,
      secret: secret.base32,         // üëà th√™m
      otpauthUrl: secret.otpauth_url // üëà th√™m
    });
  } catch (error) {
    console.error('L·ªói b·∫≠t Google Auth:', error);
    return res.status(500).json({ message: 'L·ªói server' });
  }
}



static async verifyGoogleAuth(req, res) {
  try {
    const { token } = req.body;
    const user = await User.findByPk(req.user.id);

    if (!user.wallet2FASecret || user.wallet2FAStatus !== 'pending') {
      return res.status(400).json({ message: "Ch∆∞a b·∫≠t Google Authenticator ho·∫∑c ƒë√£ x√°c minh" });
    }

    const verified = speakeasy.totp.verify({
      secret: user.wallet2FASecret,
      encoding: "base32",
      token,
      window: 1
    });

    if (!verified) {
      return res.status(400).json({ message: "M√£ kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    await user.update({
      wallet2FAStatus: 'active',
      wallet2FAEnabledAt: new Date()
    });

    res.json({ message: "X√°c minh th√†nh c√¥ng, 2FA ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t" });
  } catch (error) {
    console.error("L·ªói x√°c minh Google Auth:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
}


  static async disableGoogleAuth(req, res) {
  try {
    const { token } = req.body || {};
    const user = await User.findByPk(req.user.id, {
      attributes: ['id', 'email', 'wallet2FASecret']
    });

    if (!user.wallet2FASecret) {
      return res.status(400).json({ message: "B·∫°n ch∆∞a b·∫≠t Google Authenticator" });
    }

    if (!token || !/^\d{6}$/.test(token)) {
      return res.status(400).json({ message: "M√£ Google Authenticator kh√¥ng h·ª£p l·ªá (6 s·ªë)" });
    }

    const ok = speakeasy.totp.verify({
      secret: user.wallet2FASecret,
      encoding: "base32",
      token,
      window: 1,
    });

    if (!ok) {
      return res.status(400).json({ message: "M√£ Google Authenticator kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    await user.update({
      wallet2FASecret: null,
      wallet2FAStatus: null,
      wallet2FAEnabledAt: null
    });

    try {
      await sendEmail(
        user.email,
        "B·∫°n ƒë√£ t·∫Øt Google Authenticator",
        "B·∫°n v·ª´a t·∫Øt b·∫£o m·∫≠t 2 b∆∞·ªõc (Google Authenticator). N·∫øu kh√¥ng ph·∫£i b·∫°n, h√£y li√™n h·ªá h·ªó tr·ª£ ngay."
      );
    } catch (e) {
      console.error("G·ª≠i email th√¥ng b√°o t·∫Øt GA l·ªói:", e);
    }

    return res.json({ message: "ƒê√£ t·∫Øt Google Authenticator" });
  } catch (error) {
    console.error("disableGoogleAuth:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

// WalletController.js
static async verifyPayment(req, res) {
  try {
    const { token } = req.body || {};
    if (!/^\d{6}$/.test(token || '')) {
      return res.status(400).json({ message: 'M√£ OTP kh√¥ng h·ª£p l·ªá (6 s·ªë)' });
    }

    const user = await User.findByPk(req.user.id, {
      attributes: ['wallet2FASecret', 'wallet2FAStatus'],
    });
    if (!user.wallet2FASecret || user.wallet2FAStatus !== 'active') {
      return res.status(400).json({ message: '2FA ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t' });
    }

    const ok = speakeasy.totp.verify({
      secret: user.wallet2FASecret,
      encoding: 'base32',
      token,
      window: 1,
    });
    if (!ok) return res.status(400).json({ message: 'OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n' });

    return res.json({ success: true, message: 'X√°c minh OTP th√†nh c√¥ng' });
  } catch (e) {
    console.error('verifyPayment:', e);
    return res.status(500).json({ message: 'L·ªói server' });
  }
}
 static async requestWithdrawal(req, res) {
    try {
      const userId = req.user.id;
      const { amount, method, accountName, accountNumber, bankCode, token } = req.body;

      if (!amount || amount <= 0) {
        return res.status(400).json({ message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
      }

      // t√¨m v√≠
      const wallet = await Wallet.findOne({ where: { userId } });
      if (!wallet) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y v√≠" });

      if (parseFloat(wallet.balance) < amount) {
        return res.status(400).json({ message: "S·ªë d∆∞ kh√¥ng ƒë·ªß" });
      }

      // ki·ªÉm tra 2FA
      const user = await User.findByPk(userId, {
        attributes: ["wallet2FASecret", "wallet2FAStatus"],
      });

      if (user.wallet2FAStatus === "active") {
        if (!token || !/^\d{6}$/.test(token)) {
          return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá" });
        }

        const ok = speakeasy.totp.verify({
          secret: user.wallet2FASecret,
          encoding: "base32",
          token,
          window: 1,
        });
        if (!ok) return res.status(400).json({ message: "OTP sai ho·∫∑c h·∫øt h·∫°n" });
      }

      // ph√≠ r√∫t (vd 1%)
      const fee = Math.ceil(amount * 0.01);
      const netAmount = amount - fee;

      // tr·ª´ ti·ªÅn kh·ªèi v√≠ ngay
      wallet.balance = parseFloat(wallet.balance) - amount;
      await wallet.save();

      // t·∫°o Withdrawal record
      const withdrawal = await Withdrawal.create({
        walletId: wallet.id,
        amount,
        fee,
        netAmount,
        method,
        accountName,
        accountNumber,
        bankCode,
        status: "pending", // ch·ªù x·ª≠ l√Ω
        requestedAt: new Date(),
      });

      // log transaction
      await WalletTransaction.create({
        walletId: wallet.id,
        type: "withdraw",
        amount: -amount,
        description: `R√∫t ti·ªÅn ${method}`,
        relatedOrderId: null,
      });

      return res.json({ message: "Y√™u c·∫ßu r√∫t ti·ªÅn th√†nh c√¥ng", data: withdrawal });
    } catch (e) {
      console.error("requestWithdrawal:", e);
      return res.status(500).json({ message: "L·ªói server" });
    }
  }

  // L·ªãch s·ª≠ r√∫t ti·ªÅn
  static async getWithdrawals(req, res) {
    try {
      const userId = req.user.id;
      const wallet = await Wallet.findOne({ where: { userId } });
      if (!wallet) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y v√≠" });

      const list = await Withdrawal.findAll({
        where: { walletId: wallet.id },
        order: [["createdAt", "DESC"]],
      });

      return res.json({ data: list });
    } catch (e) {
      console.error("getWithdrawals:", e);
      return res.status(500).json({ message: "L·ªói server" });
    }
  }
}

module.exports = WalletController;

// src/controllers/client/authController.js
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { OAuth2Client } = require("google-auth-library");
const axios = require("axios");
const User = require("../../models/userModel");
const sendEmail = require("../../utils/sendEmail");
const UserToken = require("../../models/userTokenModel");
const JWT_SECRET = process.env.JWT_SECRET || "your_secret";
const BASE_URL = process.env.BASE_URL || "http://localhost:3000";
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);
const { Op } = require("sequelize");
const moment = require("moment-timezone");

class AuthController {
 
static async register(req, res) {
  try {
    const { fullName, email, password } = req.body;

    
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: "‚ùå Email ƒë√£ t·ªìn t·∫°i!" });
    }

    // ‚úÖ S·ª≠ d·ª•ng th·ªùi gian UTC
    const nowUtc = new Date();
    const tokenExpiry = 60 * 60 * 1000; // 60 ph√∫t h·∫øt h·∫°n token
    const lockDuration = 60 * 60 * 1000; // 60 ph√∫t kh√≥a n·∫øu g·ª≠i qu√° nhi·ªÅu l·∫ßn

    // ‚úÖ X√≥a t·∫•t c·∫£ token h·∫øt h·∫°n (60 ph√∫t) ho·∫∑c b·ªã kh√≥a
    await UserToken.destroy({
      where: {
        email,
        type: "emailVerification",
        [Op.or]: [
          { createdAt: { [Op.lte]: new Date(nowUtc.getTime() - tokenExpiry) } },
          { lockUntil: { [Op.not]: null, [Op.lte]: nowUtc } },
        ],
      },
    });

    // ‚úÖ T√¨m token g·∫ßn nh·∫•t
    let existingToken = await UserToken.findOne({
      where: { email, type: "emailVerification" },
      order: [["createdAt", "DESC"]],
    });

    // ‚úÖ N·∫øu b·ªã kh√≥a, t·ª´ ch·ªëi g·ª≠i l·∫°i
    if (existingToken && existingToken.lockUntil && nowUtc < new Date(existingToken.lockUntil)) {
      const remainingTime = new Date(existingToken.lockUntil) - nowUtc;
      return res.status(429).json({
        message: `ƒê√£ g·ª≠i l·∫°i qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau ${Math.ceil(remainingTime / 60000)} ph√∫t.`,
        lockTime: remainingTime,
      });
    }

    // ‚úÖ N·∫øu ƒë√£ g·ª≠i qu√° nhi·ªÅu l·∫ßn (5 l·∫ßn)
    if (existingToken && existingToken.sendCount >= 5) {
      await existingToken.update({
        lockUntil: new Date(nowUtc.getTime() + lockDuration),
        resendCooldown: null,
      });
      return res.status(429).json({
        message: "‚ùå ƒê√£ g·ª≠i l·∫°i qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau 60 ph√∫t.",
        lockTime: lockDuration,
      });
    }

    let token;
    if (existingToken) {
      // ‚úÖ N·∫øu c√≥ token ch∆∞a h·∫øt h·∫°n, tƒÉng s·ªë l·∫ßn g·ª≠i l·∫°i
      token = existingToken.token;
      await existingToken.update({
        sendCount: existingToken.sendCount + 1,
        lockUntil: null,
        createdAt: nowUtc,
      });
    } else {
      // ‚úÖ N·∫øu ch∆∞a c√≥, t·∫°o token m·ªõi
      token = jwt.sign({ fullName, email, password, roleId: 2 }, JWT_SECRET, { expiresIn: "60m" });
      await UserToken.create({
        email,
        token,
        type: "emailVerification",
        sendCount: 1,
        createdAt: nowUtc,
        lockUntil: null,
      });
    }

    // ‚úÖ G·ª≠i link x√°c th·ª±c qua email
    const verificationLink = `${BASE_URL}/verify-email?token=${token}`;
    await sendEmail(email, "X√°c th·ª±c t√†i kho·∫£n", `
      <div>
        <h2>X√°c th·ª±c t√†i kho·∫£n</h2>
        <p>Ch√†o ${fullName},</p>
        <p>Vui l√≤ng nh·∫•p v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
        <a href="${verificationLink}">X√°c th·ª±c t√†i kho·∫£n</a>
        <p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 60 ph√∫t.</p>
      </div>
    `);

    res.status(200).json({ message: "‚úÖ ƒê√£ g·ª≠i link x√°c th·ª±c qua email!" });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}







static async resendVerificationLink(req, res) {
  try {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu email." });
    }

    // ‚úÖ S·ª≠ d·ª•ng th·ªùi gian UTC
    const nowUtc = new Date();
    const lockDuration = 60 * 60 * 1000; // 60 ph√∫t kh√≥a
    const cooldownDuration = 10 * 1000; // 10 gi√¢y cooldown

    // ‚úÖ T√¨m token g·∫ßn nh·∫•t
    let existingToken = await UserToken.findOne({
      where: { email, type: "emailVerification" },
      order: [["createdAt", "DESC"]],
    });

    // ‚úÖ N·∫øu kh√¥ng c√≥ token, t·∫°o m·ªõi
    if (!existingToken) {
      const token = jwt.sign({ email }, JWT_SECRET, { expiresIn: "60m" });
      await UserToken.create({
        email,
        token,
        type: "emailVerification",
        sendCount: 1,
        createdAt: nowUtc,
        resendCooldown: new Date(nowUtc.getTime() + cooldownDuration),
        lockUntil: null,
      });
      return res.status(200).json({
        message: "‚úÖ ƒê√£ g·ª≠i l·∫°i link x√°c th·ª±c qua email!",
        resendCooldown: cooldownDuration,
        lockTime: null,
      });
    }

    // ‚úÖ Ki·ªÉm tra n·∫øu b·ªã kh√≥a (lockUntil)
    if (existingToken.lockUntil && new Date(existingToken.lockUntil) > nowUtc) {
      const remainingLockTime = new Date(existingToken.lockUntil) - nowUtc;
      return res.status(429).json({
        message: "‚ùå ƒê√£ g·ª≠i l·∫°i qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau 60 ph√∫t.",
        lockTime: remainingLockTime,
      });
    }

    // ‚úÖ Ki·ªÉm tra cooldown (resendCooldown)
    if (existingToken.resendCooldown && new Date(existingToken.resendCooldown) > nowUtc) {
      const remainingCooldown = new Date(existingToken.resendCooldown) - nowUtc;
      return res.status(429).json({
        message: "‚ùå Vui l√≤ng ch·ªù tr∆∞·ªõc khi g·ª≠i l·∫°i.",
        resendCooldown: remainingCooldown,
      });
    }

    // ‚úÖ N·∫øu ƒë√£ g·ª≠i qu√° nhi·ªÅu l·∫ßn (5 l·∫ßn)
    if (existingToken.sendCount >= 5) {
      await existingToken.update({
        lockUntil: new Date(nowUtc.getTime() + lockDuration),
        resendCooldown: null,
        sendCount: 5,
      });
      return res.status(429).json({
        message: "‚ùå ƒê√£ g·ª≠i l·∫°i qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau 60 ph√∫t.",
        lockTime: lockDuration,
      });
    }

    // ‚úÖ N·∫øu ch∆∞a ƒë·∫°t gi·ªõi h·∫°n, tƒÉng sendCount v√† ƒë·∫∑t cooldown
    const token = jwt.sign({ email }, JWT_SECRET, { expiresIn: "60m" });
    await existingToken.update({
      token,
      sendCount: existingToken.sendCount + 1,
      resendCooldown: new Date(nowUtc.getTime() + cooldownDuration),
      lockUntil: null,
    });

    // ‚úÖ G·ª≠i l·∫°i link x√°c th·ª±c qua email
    const verificationLink = `${BASE_URL}/verify-email?token=${token}`;
    await sendEmail(email, "X√°c th·ª±c l·∫°i t√†i kho·∫£n", `
      <div>
        <h2>X√°c th·ª±c l·∫°i t√†i kho·∫£n</h2>
        <p>Vui l√≤ng nh·∫•p v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
        <a href="${verificationLink}">X√°c th·ª±c t√†i kho·∫£n</a>
        <p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 60 ph√∫t.</p>
      </div>
    `);

    res.status(200).json({
      message: "‚úÖ ƒê√£ g·ª≠i l·∫°i link x√°c th·ª±c qua email!",
      resendCooldown: cooldownDuration,
      lockTime: null,
    });
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i l·∫°i link x√°c th·ª±c:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}




static async getVerificationCooldown(req, res) {
  try {
    const { email } = req.query;
    if (!email) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu email." });
    }

    const userToken = await UserToken.findOne({
      where: { email, type: "emailVerification" },
      order: [["createdAt", "DESC"]],
    });

    if (!userToken) {
      return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c." });
    }

    const now = moment.tz("Asia/Ho_Chi_Minh");
    const lockUntil = userToken.lockUntil ? moment(userToken.lockUntil) : null;
    const resendCooldown = userToken.resendCooldown ? moment(userToken.resendCooldown) : null;

    res.status(200).json({
      verified: false,
      lockUntil: lockUntil && lockUntil.isAfter(now) ? lockUntil.toISOString() : null,
      resendCooldown: resendCooldown && resendCooldown.isAfter(now) ? resendCooldown.toISOString() : null,
    });
  } catch (err) {
    console.error("‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}








static async verifyEmail(req, res) {
  try {
    console.log("\n\nüîç [START] X√°c th·ª±c email - API x√°c th·ª±c");
    const { token } = req.query;
    console.log("üîç [STEP 1] Token nh·∫≠n ƒë∆∞·ª£c t·ª´ URL:", token);

    if (!token) {
      console.log("‚ùå [ERROR] Thi·∫øu token x√°c th·ª±c!");
      return res.status(400).json({ message: "Thi·∫øu token x√°c th·ª±c!" });
    }

    // ‚úÖ Gi·∫£i m√£ token
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET);
    } catch (err) {
      console.log("‚ùå [ERROR] Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
      return res.status(400).json({ message: "Link x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }

    const { fullName, email, password, roleId } = decoded;
    console.log("üîç [STEP 2] Th√¥ng tin t·ª´ token:", { fullName, email, password, roleId });

    const tokenExpiry = 60 * 60 * 1000; // 60 ph√∫t h·∫øt h·∫°n token

    // ‚úÖ X√≥a t·∫•t c·∫£ token h·∫øt h·∫°n (60 ph√∫t) ho·∫∑c b·ªã kh√≥a (lockUntil h·∫øt h·∫°n)
    await UserToken.destroy({
      where: {
        email,
        type: "emailVerification",
        [Op.or]: [
          { createdAt: { [Op.lte]: new Date(Date.now() - tokenExpiry) } }, // H·∫øt h·∫°n
          { lockUntil: { [Op.not]: null, [Op.lte]: new Date() } },         // Kh√≥a ƒë√£ h·∫øt h·∫°n
        ],
      },
    });

    // ‚úÖ T√¨m token hi·ªán t·∫°i trong database
    const userToken = await UserToken.findOne({
      where: { email, type: "emailVerification", token },
    });

    console.log("üîç [STEP 3] Token t√¨m th·∫•y trong database:", userToken ? userToken.token : "Kh√¥ng t√¨m th·∫•y");

    if (!userToken) {
      console.log("‚ùå [ERROR] Token kh√¥ng t·ªìn t·∫°i trong database ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
      return res.status(400).json({ message: "Link x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }

    // ‚úÖ Ki·ªÉm tra n·∫øu user ƒë√£ t·ªìn t·∫°i (nghƒ©a l√† ƒë√£ x√°c th·ª±c)
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      console.log("‚úÖ [INFO] T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥.");
      await UserToken.destroy({ where: { email, type: "emailVerification" } });
      return res.status(200).json({ 
        message: "‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p.",
        alreadyVerified: true 
      });
    }

    // ‚úÖ ƒê·∫£m b·∫£o th√¥ng tin ƒë·∫ßy ƒë·ªß
    if (!fullName || !password) {
      console.log("‚ùå [ERROR] Token kh√¥ng h·ª£p l·ªá. Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng.");
      return res.status(400).json({ message: "‚ùå Token kh√¥ng h·ª£p l·ªá. Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng." });
    }

    // ‚úÖ ƒê·∫£m b·∫£o roleId c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh (n·∫øu kh√¥ng c√≥)
    const finalRoleId = roleId || 2;

    // ‚úÖ L∆∞u user v√†o database (ch·ªâ khi nh·∫•p v√†o link)
    console.log("üîç [STEP 4] ƒêang l∆∞u ng∆∞·ªùi d√πng v√†o database...");
    await User.create({
      fullName: fullName.trim(),
      email,
      password,
      roleId: finalRoleId,
    });
    console.log("‚úÖ [STEP 5] ƒê√£ l∆∞u ng∆∞·ªùi d√πng:", email);

    // ‚úÖ X√≥a t·∫•t c·∫£ token x√°c th·ª±c email c·ªßa user n√†y (ƒë√£ x√°c th·ª±c)
    await UserToken.destroy({ where: { email, type: "emailVerification" } });
    console.log("‚úÖ [STEP 6] ƒê√£ x√≥a token x√°c th·ª±c c·ªßa user trong database.");

    res.status(200).json({ message: "‚úÖ X√°c th·ª±c th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p." });
  } catch (err) {
    console.error("‚ùå [ERROR] L·ªói x√°c th·ª±c email:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}







// ‚úÖ API ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c
static async checkVerificationStatus(req, res) {
  try {
    const { email } = req.query;
    if (!email) {
      return res.status(400).json({ message: "Thi·∫øu email." });
    }

    const user = await User.findOne({ where: { email } });
    if (user) {
      return res.status(200).json({ verified: true });
    }

    res.status(200).json({ verified: false });
  } catch (err) {
    console.error("‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}











  // src/controllers/client/authController.js
static async login(req, res) {
  try {
    const { email, password } = req.body;

    // ‚úÖ T√¨m ng∆∞·ªùi d√πng theo email
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    // ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n (b·ªã kh√≥a)
    if (user.status === 0) {
      return res.status(403).json({ message: "T√†i kho·∫£n b·ªã kh√≥a!" });
    }

    // ‚úÖ So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    // ‚úÖ T·∫°o JWT Token
    const token = jwt.sign(
      {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        roleId: user.roleId
      },
      JWT_SECRET,
      { expiresIn: "7d" }
    );

    // ‚úÖ ƒê·∫∑t Cookie Token
    res.cookie("token", token, {
      httpOnly: true,
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 ng√†y
    });

    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        roleId: user.roleId,
        status: user.status,
      }
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
}


  
  // src/controllers/client/authController.js
  // ‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
// src/controllers/client/authController.js
// ‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
// src/controllers/client/authController.js
// src/controllers/client/authController.js
// src/controllers/client/authController.js
// src/controllers/client/authController.js
// ‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u (G·ª≠i l·∫°i link)
// ‚úÖ API g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
// ‚úÖ API g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
static async forgotPassword(req, res) {
  try {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu email." });
    }

    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: "‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng." });
    }

    const nowUtc = new Date();
    const lockDuration = 60 * 60 * 1000; // 60 ph√∫t kh√≥a
    const resendCooldown = 10 * 1000; // 10 gi√¢y cooldown
    const tokenExpiry = 60 * 60 * 1000; // 60 ph√∫t h·∫øt h·∫°n token

    // ‚úÖ X√≥a t·∫•t c·∫£ token h·∫øt h·∫°n ho·∫∑c b·ªã kh√≥a (UTC)
    await UserToken.destroy({
      where: {
        email,
        type: "passwordReset",
        [Op.or]: [
          { createdAt: { [Op.lte]: new Date(nowUtc.getTime() - tokenExpiry) } },
          { lockUntil: { [Op.not]: null, [Op.lte]: nowUtc } },
        ]
      }
    });

    let existingToken = await UserToken.findOne({
      where: { email, type: "passwordReset" },
      order: [["createdAt", "DESC"]],
    });

    // ‚úÖ N·∫øu ƒë√£ c√≥ token
    if (existingToken) {
      if (existingToken.lockUntil && existingToken.lockUntil > nowUtc) {
        const remainingTime = existingToken.lockUntil.getTime() - nowUtc.getTime();
        return res.status(429).json({
          message: "ƒê√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.",
          lockTime: remainingTime,
        });
      }

      if (existingToken.sendCount >= 5) {
        await existingToken.update({
          lockUntil: new Date(nowUtc.getTime() + lockDuration),
          resendCooldown: null,
          sendCount: 5
        });
        return res.status(429).json({
          message: "ƒê√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau 60 ph√∫t.",
          lockTime: lockDuration,
        });
      }

      // ‚úÖ N·∫øu kh√¥ng b·ªã kh√≥a, tƒÉng s·ªë l·∫ßn g·ª≠i l·∫°i v√† ƒë·∫∑t cooldown
      await existingToken.update({
        sendCount: existingToken.sendCount + 1,
        resendCooldown: new Date(nowUtc.getTime() + resendCooldown),
        lockUntil: null,
      });
    } else {
      // ‚úÖ N·∫øu ch∆∞a c√≥, t·∫°o token m·ªõi
      const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: "60m" });
      await UserToken.create({
        userId: user.id,
        email,
        token,
        type: "passwordReset",
        sendCount: 1,
        lockUntil: null,
        resendCooldown: new Date(nowUtc.getTime() + resendCooldown),
        createdAt: nowUtc
      });
      existingToken = { token };
    }

    const resetLink = `${BASE_URL}/dat-lai-mat-khau?token=${existingToken.token}`;
    await sendEmail(email, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u", `
      <div>
        <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <p>Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n:</p>
        <a href="${resetLink}">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
        <p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 60 ph√∫t.</p>
      </div>
    `);

    res.status(200).json({ 
      message: "‚úÖ ƒê√£ g·ª≠i li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u qua email!",
      resendCooldown: resendCooldown,
      lockTime: 0
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}


// ‚úÖ API ki·ªÉm tra tr·∫°ng th√°i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
// ‚úÖ API ki·ªÉm tra tr·∫°ng th√°i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
static async checkResetStatus(req, res) {
  try {
    const { email } = req.query;
    if (!email) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu email." });
    }

    const userToken = await UserToken.findOne({
      where: { email, type: "passwordReset" },
      order: [["createdAt", "DESC"]],
    });

    const nowUtc = new Date();

    if (!userToken) {
      return res.status(200).json({
        lockTime: 0,
        resendCooldown: 0,
        message: "‚úÖ Kh√¥ng c√≥ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒëang ch·ªù x·ª≠ l√Ω.",
      });
    }

    const lockTime = userToken.lockUntil ? Math.max(0, userToken.lockUntil.getTime() - nowUtc.getTime()) : 0;
    const resendCooldown = userToken.resendCooldown ? Math.max(0, userToken.resendCooldown.getTime() - nowUtc.getTime()) : 0;

    res.status(200).json({
      lockTime,
      resendCooldown,
      message: "‚úÖ ƒê√£ l·∫•y tr·∫°ng th√°i kh√≥a v√† cooldown th√†nh c√¥ng.",
    });
  } catch (err) {
    console.error("‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}








static async verifyResetToken(req, res) {
  try {
    const { token } = req.query;
    console.log("üîç API X√°c th·ª±c token - Token nh·∫≠n ƒë∆∞·ª£c:", token);

    if (!token) {
      console.log("‚ùå L·ªói: Thi·∫øu token!");
      return res.status(400).json({ verified: false, message: "‚ùå Thi·∫øu token!" });
    }

    const userToken = await UserToken.findOne({
      where: {
        token: token,
        type: "passwordReset"
      }
    });
    console.log("üîç Token trong database:", userToken ? userToken.token : "Kh√¥ng t√¨m th·∫•y");

    if (!userToken) {
      console.log("‚ùå L·ªói: Token kh√¥ng t·ªìn t·∫°i!");
      return res.status(400).json({ verified: false, message: "‚ùå Token kh√¥ng t·ªìn t·∫°i!" });
    }

    // ‚úÖ Gi·∫£i m√£ token
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET);
      console.log("‚úÖ Token h·ª£p l·ªá:", decoded);
    } catch (err) {
      await UserToken.destroy({ where: { token, type: "passwordReset" } });
      console.log("‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", err);
      return res.status(400).json({ verified: false, message: "‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    res.status(200).json({ verified: true, message: "‚úÖ Token h·ª£p l·ªá." });
  } catch (err) {
    console.error("‚ùå L·ªói ki·ªÉm tra token:", err);
    res.status(500).json({ verified: false, message: "‚ùå L·ªói server!" });
  }
}





 












static async resetPassword(req, res) {
  console.log("\n\nüîç [START] ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - API resetPassword");
  
  const { token, newPassword } = req.body;
  console.log("üîç Token nh·∫≠n ƒë∆∞·ª£c:", token);
  console.log("üîç M·∫≠t kh·∫©u m·ªõi:", newPassword);

  if (!token || !newPassword) {
    return res.status(400).json({ message: "‚ùå Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi!" });
  }

  // üîç T√¨m token trong database
  const userToken = await UserToken.findOne({
    where: { token: token.trim(), type: "passwordReset" }
  }).catch(err => {
    console.error("‚ùå L·ªói t√¨m token trong database:", err);
    return res.status(500).json({ message: "‚ùå L·ªói server khi t√¨m token!" });
  });

  if (!userToken) {
    console.log("‚ùå Token kh√¥ng t·ªìn t·∫°i trong database.");
    return res.status(400).json({ message: "‚ùå Token kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
  }

  // ‚úÖ Gi·∫£i m√£ token
  let decoded;
  try {
    decoded = jwt.verify(token.trim(), JWT_SECRET);
    console.log("‚úÖ Token h·ª£p l·ªá:", decoded);
  } catch (err) {
    await UserToken.destroy({ where: { token: token.trim(), type: "passwordReset" } });
    console.log("‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", err);
    return res.status(400).json({ message: "‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
  }

  // üîç L·∫•y user theo ID trong token
  const user = await User.findByPk(decoded.id).catch(err => {
    console.error("‚ùå L·ªói t√¨m user trong database:", err);
    return res.status(500).json({ message: "‚ùå L·ªói server khi t√¨m user!" });
  });

  if (!user) {
    return res.status(404).json({ message: "‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
  }

  // ‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi (hash m·∫≠t kh·∫©u)
  user.password = await bcrypt.hash(newPassword, 10).catch(err => {
    console.error("‚ùå L·ªói hash m·∫≠t kh·∫©u:", err);
    return res.status(500).json({ message: "‚ùå L·ªói server khi hash m·∫≠t kh·∫©u!" });
  });
  
  await user.save().catch(err => {
    console.error("‚ùå L·ªói l∆∞u m·∫≠t kh·∫©u m·ªõi:", err);
    return res.status(500).json({ message: "‚ùå L·ªói server khi l∆∞u m·∫≠t kh·∫©u m·ªõi!" });
  });

  // ‚úÖ X√≥a token sau khi s·ª≠ d·ª•ng
  await UserToken.destroy({ where: { token: token.trim(), type: "passwordReset" } });

  console.log("‚úÖ ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho user:", user.email);
  res.status(200).json({ message: "‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p." });
}







// ‚úÖ API g·ª≠i l·∫°i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
// ‚úÖ API g·ª≠i l·∫°i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
static async resendForgotPassword(req, res) {
  try {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu email." });
    }

    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: "‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng." });
    }

    const nowUtc = new Date();
    const lockDuration = 60 * 60 * 1000; // 60 ph√∫t kh√≥a
    const resendCooldown = 10 * 1000; // 10 gi√¢y cooldown
    const tokenExpiry = 60 * 60 * 1000; // 60 ph√∫t h·∫øt h·∫°n token

    // ‚úÖ X√≥a t·∫•t c·∫£ token h·∫øt h·∫°n (60 ph√∫t)
    await UserToken.destroy({
      where: {
        email,
        type: "passwordReset",
        [Op.or]: [
          { createdAt: { [Op.lte]: new Date(nowUtc.getTime() - tokenExpiry) } },
          { lockUntil: { [Op.not]: null, [Op.lte]: nowUtc } }
        ]
      }
    });

    let existingToken = await UserToken.findOne({
      where: { email, type: "passwordReset" },
      order: [["createdAt", "DESC"]],
    });

    // ‚úÖ N·∫øu c√≥ token hi·ªán t·∫°i
    if (existingToken) {
      const lockTime = existingToken.lockUntil ? new Date(existingToken.lockUntil).getTime() : 0;
      const cooldownTime = existingToken.resendCooldown ? new Date(existingToken.resendCooldown).getTime() : 0;

      // ‚úÖ N·∫øu b·ªã kh√≥a
      if (lockTime > nowUtc.getTime()) {
        return res.status(429).json({
          message: `‚ùå ƒê√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau ${Math.ceil((lockTime - nowUtc.getTime()) / 60000)} ph√∫t.`,
          lockTime: lockTime - nowUtc.getTime(),
        });
      }

      // ‚úÖ N·∫øu ƒëang trong th·ªùi gian cooldown
      if (cooldownTime > nowUtc.getTime()) {
        return res.status(429).json({
          message: `‚ùå Vui l√≤ng ch·ªù ${Math.ceil((cooldownTime - nowUtc.getTime()) / 1000)} gi√¢y ƒë·ªÉ g·ª≠i l·∫°i.`,
          resendCooldown: cooldownTime - nowUtc.getTime(),
        });
      }

      // ‚úÖ N·∫øu ƒë√£ g·ª≠i qu√° nhi·ªÅu l·∫ßn, kh√≥a 60 ph√∫t
      if (existingToken.sendCount >= 5) {
        await existingToken.update({
          lockUntil: new Date(nowUtc.getTime() + lockDuration),
          resendCooldown: null,
          sendCount: 5,
        });
        return res.status(429).json({
          message: "‚ùå ƒê√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau 60 ph√∫t.",
          lockTime: lockDuration,
        });
      }

      // ‚úÖ N·∫øu kh√¥ng b·ªã kh√≥a, tƒÉng s·ªë l·∫ßn g·ª≠i l·∫°i v√† ƒë·∫∑t cooldown
      await existingToken.update({
        sendCount: existingToken.sendCount + 1,
        resendCooldown: new Date(nowUtc.getTime() + resendCooldown),
        lockUntil: null,
      });
    } else {
      // ‚úÖ N·∫øu ch∆∞a c√≥, t·∫°o token m·ªõi
      const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: "60m" });
      await UserToken.create({
        userId: user.id,
        email,
        token,
        type: "passwordReset",
        sendCount: 1,
        lockUntil: null,
        resendCooldown: new Date(nowUtc.getTime() + resendCooldown),
      });
      existingToken = { token };
    }

    const resetLink = `${BASE_URL}/dat-lai-mat-khau?token=${existingToken.token}`;
    await sendEmail(email, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u", `
      <div>
        <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <p>Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n:</p>
        <a href="${resetLink}">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
        <p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 60 ph√∫t.</p>
      </div>
    `);

    res.status(200).json({
      message: "‚úÖ ƒê√£ g·ª≠i l·∫°i li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!",
      lockTime: existingToken.lockUntil ? Math.max(0, new Date(existingToken.lockUntil).getTime() - nowUtc.getTime()) : 0,
      resendCooldown: existingToken.resendCooldown ? Math.max(0, new Date(existingToken.resendCooldown).getTime() - nowUtc.getTime()) : 0,
    });
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i l·∫°i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", err);
    res.status(500).json({ message: "‚ùå L·ªói server!" });
  }
}





// ‚úÖ API ki·ªÉm tra tr·∫°ng th√°i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u





 
static async getUserInfo(req, res) {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    console.log("üîé Token Backend nh·∫≠n ƒë∆∞·ª£c:", token);
    
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log("üîé Th√¥ng tin Token:", decoded);

    const user = await User.findByPk(decoded.id, {
      attributes: ["id", "fullName", "email", "roleId"],
    });

    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

    res.status(200).json({ user });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n!" });
  }
}

  
  // src/controllers/client/authController.js

static async googleLogin(req, res) {
  try {
    const { token } = req.body;
    if (!token) return res.status(400).json({ message: "Thi·∫øu token!" });

    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    const providerId = payload.sub; // Google ID
    const email = payload.email;
    const name = payload.name || email.split("@")[0];
    const avatar = payload.picture;
    console.log("üîç fullName t·ª´ Google:", name);
    // 1. T√¨m user theo providerId + provider
    let user = await User.findOne({
      where: {
        provider: "google",
        providerId,
      },
    });

    if (!user) {
      // 2. N·∫øu ch∆∞a c√≥ th√¨ ki·ªÉm tra theo email
      user = await User.findOne({ where: { email } });

      if (user) {
        // N·∫øu email ƒë√£ c√≥ (do ƒëƒÉng k√Ω local tr∆∞·ªõc) th√¨ update provider info
        await user.update({
          provider: "google",
          providerId,
        });
      } else {
        // 3. N·∫øu ch∆∞a c√≥ user n√†o th√¨ t·∫°o m·ªõi
        user = await User.create({
          fullName: name,
          email,
          provider: "google",
          providerId,
          password: null,
          roleId: 2,
          status: 1,
          isVerified: 1,
        });
      }
    }

    const accessToken = jwt.sign(
      {
        id: user.id,
        email: user.email,
        fullName: user.fullName, // ‚úÖ ƒê·∫£m b·∫£o c√≥ fullName ·ªü ƒë√¢y
        roleId: user.roleId,
      },
      JWT_SECRET,
      { expiresIn: "7d" }
    );

    res.cookie("token", accessToken, {
      httpOnly: true,
      secure: true,
      sameSite: "None",
      maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    return res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!",
      token: accessToken,
      user: {
        id: user.id,
        fullName: user.fullName, // ‚úÖ ƒê·∫£m b·∫£o tr·∫£ v·ªÅ fullName
        email: user.email,
        roleId: user.roleId,
        status: user.status,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói Google Login:", err);
    return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
  }
}


  static async facebookLogin(req, res) {
    try {
      const { accessToken, userID } = req.body;
      if (!accessToken || !userID)
        return res.status(400).json({ message: "Thi·∫øu accessToken ho·∫∑c userID" });
  
      // G·ªçi Graph API ƒë·ªÉ l·∫•y th√¥ng tin user
      const fbRes = await axios.get(
        `https://graph.facebook.com/v18.0/${userID}?fields=id,name,email,picture&access_token=${accessToken}`
      );
  
      const { id: providerId, name, email, picture } = fbRes.data;
      if (!email) return res.status(400).json({ message: "Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ Facebook" });
  
      let user = await User.findOne({ where: { provider: "facebook", providerId } });
  
      if (!user) {
        // N·∫øu email ƒë√£ t·ªìn t·∫°i (t·ª´ng ƒëƒÉng k√Ω local ho·∫∑c google)
        user = await User.findOne({ where: { email } });
        if (user) {
          await user.update({ provider: "facebook", providerId });
        } else {
          user = await User.create({
            fullName: name,
            email,
            provider: "facebook",
            providerId,
            password: null,
            roleId: 2,
            status: 1,
            isVerified: 1,
          });
        }
      }
  
      const token = jwt.sign(
        {
          id: user.id,
          email: user.email,
          roleId: user.roleId,
        },
        JWT_SECRET,
        { expiresIn: "7d" }
      );
  
      res.cookie("token", token, {
        httpOnly: true,
        secure: true,
        sameSite: "None",
        maxAge: 7 * 24 * 60 * 60 * 1000,
      });
  
      return res.status(200).json({
        message: "ƒêƒÉng nh·∫≠p Facebook th√†nh c√¥ng!",
        token,
        user: {
          id: user.id,
          email: user.email,
          fullName: user.fullName,
          roleId: user.roleId,
          status: user.status,
        },
      });
    } catch (err) {
      console.error("‚ùå Facebook Login Error:", err);
      return res.status(401).json({ message: "ƒêƒÉng nh·∫≠p Facebook th·∫•t b·∫°i!" });
    }
  }
  // src/controllers/client/authController.js
static async logout(req, res) {
  try {
    // X√≥a cookie token
    res.clearCookie("token", {
      httpOnly: true,
      secure: true,
      sameSite: "None",
    });
    res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng xu·∫•t:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
}

}

module.exports = AuthController;

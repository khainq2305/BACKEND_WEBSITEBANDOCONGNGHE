// src/controllers/CouponController.js

const { Op } = require('sequelize');
const {
    Coupon,
    CouponUser,
    CouponItem,
    Sku,
    Product,
    Order // ƒê·∫£m b·∫£o Order model ƒë√£ ƒë∆∞·ª£c import n·∫øu b·∫°n ch∆∞a c√≥
} = require('../../models');

function formatCoupon(coupon, isApplicable) {
    return {
        id: coupon.id,
        code: coupon.code,
        title: coupon.title,
        discountType: coupon.discountType,
        discountValue: coupon.discountValue,
        maxDiscount: coupon.maxDiscountValue,
        minOrderAmount: coupon.minOrderValue || 0,
        expiryDate: coupon.endTime,
        type: coupon.type,
        isApplicable
    };
}

class CouponController {
    // ‚úÖ √Åp d·ª•ng m√£ gi·∫£m gi√°
    static async applyCoupon(req, res) {
        try {
            const userId = req.user.id;
            const { code, skuId, orderTotal } = req.body;

            if (!code || typeof code !== 'string') {
                return res.status(400).json({ message: 'M√£ kh√¥ng h·ª£p l·ªá' });
            }

            const coupon = await Coupon.findOne({
                where: { code: code.trim() },
                include: [
                    { model: CouponUser, as: 'users', attributes: ['userId'], paranoid: false },
                    { model: CouponItem, as: 'products', attributes: ['skuId'], paranoid: false }
                ],
                paranoid: false // Quan tr·ªçng ƒë·ªÉ l·∫•y ƒë∆∞·ª£c c·∫£ c√°c coupon ƒë√£ b·ªã soft-delete
            });

            // 1. Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa coupon
            if (!coupon) {
                return res.status(404).json({ message: `M√£ gi·∫£m gi√° "${code}" kh√¥ng t·ªìn t·∫°i.` });
            }

            // 2. Ki·ªÉm tra th·ªùi gian (∆∞u ti√™n ki·ªÉm tra h·∫øt h·∫°n/ch∆∞a √°p d·ª•ng)
            const now = new Date();
            if (coupon.startTime && now < new Date(coupon.startTime)) {
                return res.status(400).json({ message: "M√£ gi·∫£m gi√° ch∆∞a ƒë·∫øn th·ªùi gian √°p d·ª•ng." });
            }
            if (coupon.endTime && now > new Date(coupon.endTime)) {
                return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n." });
            }

            // 3. Ki·ªÉm tra c√°c tr·∫°ng th√°i kh√°c (sau khi ƒë√£ ki·ªÉm tra th·ªùi gian)
            if (coupon.deletedAt) {
                 return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ b·ªã x√≥a." });
            }
            if (!coupon.isActive) {
                return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒëang t·∫°m ng∆∞ng." });
            }

            // 4. Ki·ªÉm tra gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu
            if (coupon.minOrderValue && orderTotal < coupon.minOrderValue) {
                return res.status(400).json({
                    message: `ƒê∆°n h√†ng ph·∫£i ƒë·∫°t t·ªëi thi·ªÉu ${coupon.minOrderValue.toLocaleString()}‚Ç´ ƒë·ªÉ √°p d·ª•ng m√£.`
                });
            }

            // 5. Ki·ªÉm tra lo·∫°i coupon (public/private) v√† quy·ªÅn user
            if (coupon.type === 'private') {
                const allowedUserIds = coupon.users?.map(u => u.userId) || [];
                if (!allowedUserIds.includes(userId)) {
                    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng m√£ n√†y." });
                }
            }

            // 6. Ki·ªÉm tra gi·ªõi h·∫°n s·∫£n ph·∫©m/SKU
            const allowedSkuIds = coupon.products?.map(p => p.skuId) || [];
            if (allowedSkuIds.length > 0) {
                if (!skuId || !allowedSkuIds.includes(skuId)) {
                    return res.status(403).json({ message: "M√£ kh√¥ng √°p d·ª•ng cho s·∫£n ph·∫©m n√†y." });
                }
            }

            // 7. Ki·ªÉm tra s·ªë l∆∞·ª£ng l∆∞·ª£t s·ª≠ d·ª•ng c√≤n l·∫°i (totalQuantity)
            const totalQuantity = coupon.totalQuantity;
            if (totalQuantity !== null && totalQuantity > 0) {
                const usedCount = await Order.count({
                    where: {
                        couponId: coupon.id,
                        status: { [Op.notIn]: ['cancelled', 'failed'] } // ch·ªâ t√≠nh ƒë∆°n ƒë√£ ƒë∆∞·ª£c d√πng coupon v√† kh√¥ng b·ªã h·ªßy/th·∫•t b·∫°i
                    }
                });

                if (usedCount >= totalQuantity) {
                    return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng." });
                }
            }
            
            // 8. T√≠nh gi·∫£m gi√°
// 8. T√≠nh gi·∫£m gi√°
let discountAmount = 0;
if (coupon.discountType === 'percent') {
  discountAmount = (orderTotal * Number(coupon.discountValue)) / 100;
} else if (coupon.discountType === 'amount' || coupon.discountType === 'fixed') {
  discountAmount = Number(coupon.discountValue);
}

if (coupon.maxDiscountValue && discountAmount > Number(coupon.maxDiscountValue)) {
  discountAmount = Number(coupon.maxDiscountValue);
}


           
console.log('üì• applyCoupon debug:', {
  orderTotal,
  discountType: coupon.discountType,
  discountValue: coupon.discountValue,
  maxDiscountValue: coupon.maxDiscountValue,
});

            return res.json({
                message: "√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng",
                coupon: {
                    id: coupon.id,
                    code: coupon.code,
                    title: coupon.title,
                    discountType: coupon.discountType,
                    discountValue: coupon.discountValue,
                    maxDiscount: coupon.maxDiscountValue,
                    minOrderAmount: coupon.minOrderValue || 0,
                    discountAmount: Math.round(discountAmount),
                    expiryDate: coupon.endTime
                }
            });

        } catch (err) {
            console.error("‚ùå L·ªói khi √°p d·ª•ng m√£ gi·∫£m:", err);
            return res.status(500).json({ message: "L·ªói server", error: err.message });
        }
    }

    // ‚úÖ L·∫•y danh s√°ch m√£ gi·∫£m gi√° kh·∫£ d·ª•ng (gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc)
    static async getAvailableCoupons(req, res) {
        try {
            const userId = req.user.id;
            const now = new Date();

            const skuIdFromQuery = req.query.skuId ? Number(req.query.skuId) : null;

            const coupons = await Coupon.findAll({
                where: {
                    isActive: true,
                    deletedAt: null, // Ch·ªâ l·∫•y nh·ªØng coupon ch∆∞a b·ªã soft-delete
                    [Op.and]: [
                        { startTime: { [Op.lte]: now } },
                        { endTime: { [Op.gte]: now } }
                    ]
                },
                include: [
                    { model: CouponUser, as: 'users', attributes: ['userId'], paranoid: false },
                    { model: CouponItem, as: 'products', attributes: ['skuId'], paranoid: false }
                ],
                order: [['createdAt', 'DESC']],
                paranoid: false
            });

            const data = coupons.map(coupon => {
                let isApplicable = false;

                if (coupon.type === 'public') {
                    isApplicable = true;
                } else if (coupon.type === 'private') {
                    const allowedUserIds = coupon.users?.map(u => u.userId) || [];
                    if (allowedUserIds.includes(userId)) {
                        isApplicable = true;
                    }
                }

                if (!isApplicable) {
                    return formatCoupon(coupon, false);
                }

                const allowedSkuIds = coupon.products?.map(p => p.skuId) || [];
                if (allowedSkuIds.length > 0) {
                    if (!skuIdFromQuery || !allowedSkuIds.includes(skuIdFromQuery)) {
                        return formatCoupon(coupon, false);
                    }
                }
                
                // Vi·ªác ki·ªÉm tra totalQuantity chi ti·∫øt h∆°n s·∫Ω di·ªÖn ra ·ªü applyCoupon
                // ·ªû ƒë√¢y, ta ch·ªâ ƒë∆°n gi·∫£n tr·∫£ v·ªÅ true n·∫øu c√°c ƒëi·ªÅu ki·ªán tr√™n th·ªèa m√£n
                // v√¨ ƒë·∫øm usedCount ·ªü ƒë√¢y kh√¥ng hi·ªáu qu·∫£ cho danh s√°ch.

                return formatCoupon(coupon, true);
            });

            return res.json({ data });

        } catch (err) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°:", err);
            res.status(500).json({ message: "L·ªói server", error: err.message });
        }
    }

}

module.exports = CouponController;
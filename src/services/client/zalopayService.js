const crypto = require("crypto");
const axios = require("axios");

// L·∫•y gi√° tr·ªã t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const ZALOPAY_APP_ID = process.env.ZALOPAY_APP_ID;
const ZALOPAY_KEY1 = process.env.ZALOPAY_KEY1;
const ZALOPAY_KEY2 = process.env.ZALOPAY_KEY2;
const ZALOPAY_CALLBACK_URL = process.env.ZALOPAY_CALLBACK_URL;
const ZALOPAY_REDIRECT_URL = process.env.ZALOPAY_REDIRECT_URL;

const ZALO_ENDPOINT = "https://sb-openapi.zalopay.vn/v2/create";


exports.createPaymentLink = async ({ orderId, amount, orderInfo }) => {
    console.log("DEBUG: ZALOPAY_APP_ID:", ZALOPAY_APP_ID);
    console.log("DEBUG: ZALOPAY_KEY1:", ZALOPAY_KEY1);
    console.log("DEBUG: ZALOPAY_CALLBACK_URL:", ZALOPAY_CALLBACK_URL);

    if (!ZALOPAY_APP_ID || !ZALOPAY_KEY1 || !ZALOPAY_CALLBACK_URL) {
        console.error("L·ªñI C·∫§U H√åNH ZALOPAY: Thi·∫øu c√°c bi·∫øn m√¥i tr∆∞·ªùng ZALOPAY_APP_ID, ZALOPAY_KEY1, ho·∫∑c ZALOPAY_CALLBACK_URL.");
        throw new Error("Thi·∫øu c·∫•u h√¨nh ZaloPay trong .env");
    }

    const transId = Math.floor(Math.random() * 1000000);
    const app_trans_id_value = `${new Date().toISOString().slice(2, 10).replace(/-/g, "")}_${transId}`; // T√™n m·ªõi ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
    const app_time_value = Date.now(); // T√™n m·ªõi

    const itemData = [
        { itemid: "product_001", itemname: "S·∫£n ph·∫©m test", itemquantity: 1, itemprice: Math.round(amount) }
    ];
    
  const embedData = {
  redirecturl: `${ZALOPAY_REDIRECT_URL}?orderCode=${orderId}`, // orderId ·ªü ƒë√¢y l√† order.orderCode
};


    // T·∫†O ƒê·ªêI T∆Ø·ª¢NG order ƒê·ªÇ G·ª¨I ƒêI V·ªöI T√äN TR∆Ø·ªúNG C√ì D·∫§U G·∫†CH D∆Ø·ªöI NH∆Ø TRONG PAYLOAD M·∫™U C·ª¶A ZALOPAY
    const orderPayload = {
        app_id: Number(ZALOPAY_APP_ID), // D√ôNG app_id c√≥ g·∫°ch d∆∞·ªõi trong payload g·ª≠i ƒëi
        app_trans_id: app_trans_id_value, // D√ôNG app_trans_id c√≥ g·∫°ch d∆∞·ªõi trong payload g·ª≠i ƒëi
        app_user: "ZaloPayDemo",         // D√ôNG app_user c√≥ g·∫°ch d∆∞·ªõi trong payload g·ª≠i ƒëi
        amount: Math.round(amount),
        app_time: app_time_value,
        description: `Thanh toan don hang ${orderInfo?.replace(/[^a-zA-Z0-9-]/g, "") || "ZaloOrder"}`,
      bank_code: "atm",

        item: JSON.stringify(itemData),
        embed_data: JSON.stringify(embedData), // D√ôNG embed_data c√≥ g·∫°ch d∆∞·ªõi trong payload g·ª≠i ƒëi
        callback_url: ZALOPAY_CALLBACK_URL,  // D√ôNG callback_url c√≥ g·∫°ch d∆∞·ªõi trong payload g·ª≠i ƒëi
    };


    // T√çNH MAC V·∫™N D√ôNG C√ÅC T√äN TR∆Ø·ªúNG KH√îNG C√ì D·∫§U G·∫†CH D∆Ø·ªöI V√Ä D·ªÆ LI·ªÜU ƒê·ªÇ T√çNH MAC
    // V√¨ c√¥ng th·ª©c MAC y√™u c·∫ßu: appid|apptransid|appuser|amount|apptime|embed_data|item
    // CH√ö √ù: C√ÅC TR∆Ø·ªúNG embed_data v√† item V·∫™N PH·∫¢I L√Ä STRING JSON ƒê·ªÇ T√çNH MAC ƒê√öNG
    const dataForMac = `${Number(ZALOPAY_APP_ID)}|${app_trans_id_value}|ZaloPayDemo|${Math.round(amount)}|${app_time_value}|${JSON.stringify(embedData)}|${JSON.stringify(itemData)}`;
    
    console.log("DEBUG FINAL: Chu·ªói DATA ƒë·ªÉ t√≠nh MAC:", dataForMac);
    console.log("DEBUG FINAL: ZALOPAY_KEY1 d√πng ƒë·ªÉ t√≠nh MAC:", ZALOPAY_KEY1);

    orderPayload.mac = crypto.createHmac("sha256", ZALOPAY_KEY1).update(dataForMac).digest("hex");

    console.log("DEBUG FINAL: MAC ƒë√£ t√≠nh:", orderPayload.mac);

    console.log("üì§ Sending to ZaloPay (FULL ORDER PAYLOAD):", JSON.stringify(orderPayload, null, 2));

    try {
        const response = await axios.post(ZALO_ENDPOINT, orderPayload, { // G·ª≠i orderPayload ƒëi
            headers: {
                "Content-Type": "application/json"
            }
        });

        console.log("‚úÖ ZaloPay response:", response.data);
        return response.data;
    } catch (err) {
        console.error("‚ùå ZaloPay error:", err?.response?.data || err.message);
        throw err;
    }
};
exports.refund = async ({ app_trans_id, zp_trans_id, amount, user = "admin" }) => {
  const endpoint = "https://sb-openapi.zalopay.vn/v2/refund";

  const requestId = crypto.randomUUID().replace(/-/g, "").slice(0, 32);
  const timestamp = Date.now();

  const dataMac = `${ZALOPAY_APP_ID}|${zp_trans_id}|${app_trans_id}|${Math.round(amount)}|${timestamp}`;
  const mac = crypto.createHmac("sha256", ZALOPAY_KEY1).update(dataMac).digest("hex");

  const payload = {
    app_id: ZALOPAY_APP_ID,
    zp_trans_id,        // m√£ giao d·ªãch ZaloPay tr·∫£ v·ªÅ khi thanh to√°n
    app_trans_id,       // m√£ giao d·ªãch n·ªôi b·ªô (gi·ªëng l√∫c t·∫°o ƒë∆°n)
    amount: Math.round(amount),
    timestamp,
    mac
  };

  console.log("üì§ G·ª≠i refund ZaloPay:", payload);

  try {
    const res = await axios.post(endpoint, payload, {
      headers: {
        "Content-Type": "application/json"
      }
    });

    console.log("‚úÖ K·∫øt qu·∫£ ho√†n ti·ªÅn ZaloPay:", res.data);
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói ho√†n ti·ªÅn ZaloPay:", err?.response?.data || err.message);
    throw err;
  }
};

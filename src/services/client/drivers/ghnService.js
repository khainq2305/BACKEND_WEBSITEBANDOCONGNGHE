// drivers/ghnService.js
// ===============================================================
// Driver: Giao H√†ng Nhanh (GHN)
// Tr·∫£ v·ªÅ { fee: number, leadTime: number|null } ‚Äì leadTime = s·ªë ng√†y
// ===============================================================

const axios = require('axios');
const NodeCache = require('node-cache');
const cache = new NodeCache({ stdTTL: 86_400 }); // 24 h

const mysql = require('mysql2/promise');
// const { Op } = require('sequelize'); // Gi·ªØ l·∫°i n·∫øu b·∫°n c√≥ th·ªÉ d√πng Op (Sequelize-like), n·∫øu kh√¥ng s·∫Ω d√πng LIKE/raw SQL cho t√¨m ki·∫øm t√™n

const {
    GHN_TOKEN,
    GHN_SHOP_ID,
    SHOP_DISTRICT_CODE, // GHN DistrictID c·ªßa kho l·∫•y h√†ng (t·ª´ .env)
    SHOP_WARD_CODE,     // GHN WardCode c·ªßa kho l·∫•y h√†ng (t·ª´ .env)
    // C√°c bi·∫øn m√¥i tr∆∞·ªùng kh√°c c·ªßa shop nh∆∞ SHOP_NAME, SHOP_PHONE, SHOP_ADDRESS, SHOP_PROVINCE_CODE
    // s·∫Ω ƒë∆∞·ª£c truy·ªÅn tr·ª±c ti·∫øp qua payload t·ª´ OrderController
} = process.env;

const headers = { Token: GHN_TOKEN, 'Content-Type': 'application/json' };

// K·∫øt n·ªëi DB (m·ªôt l·∫ßn duy nh·∫•t khi module ƒë∆∞·ª£c t·∫£i)
let dbConnection;
(async () => {
    try {
        dbConnection = await mysql.createConnection({
            host: process.env.DB_HOST,
            port: +process.env.DB_PORT || 3306,
            user: process.env.DB_USER,
            password: process.env.DB_PASS,
            database: process.env.DB_NAME,
            charset: 'utf8mb4',
        });
        console.log('GHN Service: ƒê√£ k·∫øt n·ªëi DB.');
    } catch (error) {
        console.error('GHN Service: L·ªói k·∫øt n·ªëi DB:', error.message);
        // C√≥ th·ªÉ tho√°t ·ª©ng d·ª•ng ho·∫∑c x·ª≠ l√Ω l·ªói kh√°c t√πy v√†o y√™u c·∫ßu c·ªßa b·∫°n
    }
})();


/* ---------- Helper cho h√†m chu·∫©n h√≥a (Gi·ªëng h·ªát trong importGhn.js) ---------- */
const deAccent = t => t.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
const stripProv = t => t
    .replace(/^(T·ªânh|Tinh)\s+/i, '')
    .replace(/^(Th√†nh ph·ªë|Thanh pho|TP)\s+/i, '');
const stripDist = t => t
    .replace(/^(Qu·∫≠n|Quan|Huy·ªán|Huyen|Th·ªã x√£|Thi xa|TP|TX)\s+/i, '');
const stripWard = t => t
    .replace(/^(Ph∆∞·ªùng|Phuong|X√£|Xa|Th·ªã tr·∫•n|Thi tran)\s+/i, '');

// ƒê·∫£m b·∫£o h√†m norm lu√¥n nh·∫≠n v√† tr·∫£ v·ªÅ chu·ªói. V·∫´n c·∫ßn ƒë·ªÉ chu·∫©n h√≥a t√™n tr∆∞·ªõc khi query
// m·∫∑c d√π kh√¥ng d√πng c·ªôt normalizedName, nh∆∞ng c√≥ th·ªÉ c·∫ßn ƒë·ªÉ kh·ªõp t√™n ch√≠nh x√°c h∆°n.
const norm = t => deAccent(stripDist(stripProv(stripWard(String(t || '')))))
    .replace(/[^\w\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()
    .toLowerCase();


/* ------------------------------------------------------------------ *
 * 1Ô∏è‚É£ Helpers: tra & cache ProvinceID / DistrictID / WardCode T·ª™ LOCAL DB
 * ------------------------------------------------------------------ */

/**
 * Tra c·ª©u GHN ProvinceID, DistrictID, WardCode t·ª´ database c·ª•c b·ªô.
 * ∆Øu ti√™n tra c·ª©u theo ID n·ªôi b·ªô (n·∫øu l√† s·ªë), sau ƒë√≥ theo t√™n g·ªëc.
 *
 * @param {object} params
 * @param {number|string} params.province ‚Äì ID ho·∫∑c t√™n t·ªânh n·ªôi b·ªô
 * @param {number|string} params.district ‚Äì ID ho·∫∑c t√™n huy·ªán n·ªôi b·ªô
 * @param {number|string} params.ward ‚Äì ID ho·∫∑c t√™n x√£ n·ªôi b·ªô (c√≥ th·ªÉ null)
 * @returns {Promise<{ ghnProvId: number|null, ghnDistId: number|null, ghnWardCode: string|null }>}
 */
async function getGhnCodesFromLocalDb({ province = null, district, ward }) {
  if (!dbConnection) throw new Error('GHN Service: DB ch∆∞a k·∫øt n·ªëi.');

  const GHN_PROVIDER_ID = 1;

  let localProvId = null;
  let localDistId = null;

  let ghnProvId = null;
  let ghnDistId = null;
  let ghnWardCode = null;

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HUY·ªÜN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const isDistrictId = typeof district === 'number';
  const [distRes] = isDistrictId
    ? await dbConnection.query(
        `SELECT pd.providerDistrictCode, pd.districtId, pd.provinceId 
         FROM providerdistricts pd 
         WHERE pd.providerId = ? AND pd.districtId = ? LIMIT 1`,
        [GHN_PROVIDER_ID, district]
      )
    : await dbConnection.query(
        `SELECT pd.providerDistrictCode, pd.districtId, pd.provinceId 
         FROM providerdistricts pd 
         JOIN districts d ON pd.districtId = d.id 
         WHERE pd.providerId = ? AND d.name = ? LIMIT 1`,
        [GHN_PROVIDER_ID, district]
      );

  if (!distRes?.length) throw new Error(`GHN: Kh√¥ng t√¨m th·∫•y m√£ huy·ªán cho '${district}'`);

  ghnDistId = distRes[0].providerDistrictCode;
  localDistId = distRes[0].districtId;
  localProvId = distRes[0].provinceId;

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ T·ªàNH ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const [provRes] = await dbConnection.query(
    `SELECT pp.providerProvinceCode 
     FROM providerprovinces pp 
     WHERE pp.providerId = ? AND pp.provinceId = ? LIMIT 1`,
    [GHN_PROVIDER_ID, localProvId]
  );

  if (!provRes?.length) throw new Error(`GHN: Kh√¥ng t√¨m th·∫•y m√£ t·ªânh t·ª´ huy·ªán ${district}`);
  ghnProvId = provRes[0].providerProvinceCode;

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ X√É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  if (ward) {
    const isWardId = typeof ward === 'number';
    const [wardRes] = isWardId
      ? await dbConnection.query(
          `SELECT pw.providerWardCode 
           FROM providerwards pw 
           WHERE pw.providerId = ? AND pw.wardId = ? AND pw.districtId = ? LIMIT 1`,
          [GHN_PROVIDER_ID, ward, localDistId]
        )
      : await dbConnection.query(
          `SELECT pw.providerWardCode 
           FROM providerwards pw 
           JOIN wards w ON pw.wardId = w.id 
           WHERE pw.providerId = ? AND w.name = ? AND pw.districtId = ? LIMIT 1`,
          [GHN_PROVIDER_ID, ward, localDistId]
        );

    if (wardRes?.length) ghnWardCode = wardRes[0].providerWardCode;
  }

  return {
    ghnProvId,
    ghnDistId,
    ghnWardCode,
  };
}



/* ------------------------------------------------------------------ *
 * 2Ô∏è‚É£ Service m·∫∑c ƒë·ªãnh ‚Äì l·∫•y service_id (Cho tuy·∫øn FROM_SHOP -> TO_CUSTOMER)
 * ------------------------------------------------------------------ */
async function getDefaultService({ toDistrict }) {
    if (!toDistrict) {
        console.error('GHN: Thi·∫øu toDistrict khi g·ªçi getDefaultService.');
        throw new Error('GHN: Thi·∫øu m√£ huy·ªán nh·∫≠n ƒë·ªÉ tra service');
    }

    try {
        const payload = {
            shop_id: Number(GHN_SHOP_ID),
            from_district: Number(SHOP_DISTRICT_CODE),  // M√£ GHN huy·ªán c·ªßa shop (kho)
            to_district: Number(toDistrict),            // M√£ GHN huy·ªán nh·∫≠n
        };

        console.log('[GHN getDefaultService] Request Payload:', payload);

        const response = await axios.post(
            'https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/available-services',
            payload,
            { headers, timeout: 5000 }
        );

        const data = response?.data;

        console.log('[GHN getDefaultService] Response Data:', data);

        if (!data || !Array.isArray(data.data) || data.data.length === 0) {
            console.error('[GHN getDefaultService] Kh√¥ng c√≥ d·ªãch v·ª• kh·∫£ d·ª•ng t·ª´ API.');
            throw new Error('GHN: Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• kh·∫£ d·ª•ng.');
        }

        const firstService = data.data[0];
        if (!firstService.service_type_id) {
            console.error('[GHN getDefaultService] D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng c√≥ service_type_id:', firstService);
            throw new Error('GHN: Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá ‚Äì thi·∫øu service_type_id.');
        }

        console.log(`[GHN getDefaultService] service_type_id ƒë∆∞·ª£c ch·ªçn: ${firstService.service_type_id}`);
        return firstService.service_type_id;

    } catch (err) {
        const errData = err?.response?.data;
        console.error('[GHN getDefaultService API error]', errData || err.message);
        throw new Error(`GHN: L·ªói khi l·∫•y d·ªãch v·ª• m·∫∑c ƒë·ªãnh: ${errData?.message || err.message}`);
    }
}


/* ------------------------------------------------------------------ *
 * 3Ô∏è‚É£ Fee & Lead-time (Cho tuy·∫øn FROM_SHOP -> TO_CUSTOMER)
 * ------------------------------------------------------------------ */
/**
 * T√≠nh ph√≠ v√† th·ªùi gian giao h√†ng (leadTime) GHN
 * @param {Object} params
 * @param {number|string} params.toProvince ‚Äì ID ho·∫∑c t√™n t·ªânh n·ªôi b·ªô
 * @param {number|string} params.toDistrict ‚Äì ID ho·∫∑c t√™n huy·ªán n·ªôi b·ªô
 * @param {number|string} params.toWard ‚Äì ID ho·∫∑c t√™n x√£ n·ªôi b·ªô
 * @param {number} params.weight ‚Äì tr·ªçng l∆∞·ª£ng (gram)
 * @param {number} params.length ‚Äì chi·ªÅu d√†i (cm)
 * @param {number} params.width ‚Äì chi·ªÅu r·ªông (cm)
 * @param {number} params.height ‚Äì chi·ªÅu cao (cm)
 * @param {number} params.serviceCode ‚Äì GHN service_id (t√πy ch·ªçn)
 * @param {number} params.orderValue ‚Äì gi√° tr·ªã ƒë∆°n h√†ng ƒë·ªÉ b·∫£o hi·ªÉm (t√πy ch·ªçn)
 * @returns {Promise<{ fee: number, leadTime: number }>}
 */
async function getFee({
  toProvince, toDistrict, toWard,
  weight, length, width, height,
  serviceCode,
  orderValue = 0,
}) {
  const { ghnProvId: pid, ghnDistId: did, ghnWardCode: wcd } = await getGhnCodesFromLocalDb({
    province: toProvince,
    district: toDistrict,
    ward: toWard,
  });

  if (!pid || !did) {
    console.error(`[GHN getFee] Kh√¥ng t√¨m th·∫•y m√£ t·ªânh/huy·ªán GHN. Province: ${toProvince}, District: ${toDistrict}`);
    throw new Error('GHN: Kh√¥ng t√¨m th·∫•y m√£ t·ªânh/huy·ªán GHN.');
  }

  let service_type_id = null;
  let actualServiceId = null;

  // üîπ B1: L·∫•y service_type_id t∆∞∆°ng ·ª©ng
  try {
    const { data: svcRes } = await axios.post(
      'https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/available-services',
      {
        shop_id: Number(GHN_SHOP_ID),
        from_district: Number(SHOP_DISTRICT_CODE),
        to_district: Number(did),
      },
      { headers, timeout: 5000 }
    );

    if (!svcRes?.data?.length) throw new Error('Kh√¥ng c√≥ d·ªãch v·ª• kh·∫£ d·ª•ng.');

    const matched = svcRes.data.find(s => s.service_id === Number(serviceCode));
    const svc = matched || svcRes.data[0];
    service_type_id = svc.service_type_id;
    actualServiceId = svc.service_id;

    console.log(`[GHN getFee] Ch·ªçn service_type_id: ${service_type_id}, service_id: ${actualServiceId}`);
  } catch (err) {
    console.error('[GHN getFee] L·ªói l·∫•y service_type_id:', err?.response?.data || err.message);
    throw new Error(`GHN: L·ªói khi l·∫•y service_type_id: ${err?.response?.data?.message || err.message}`);
  }

  // üîπ B2: G·ªçi API t√≠nh ph√≠
  let fee = 0;
  let feeData;
  try {
    const feePayload = {
      from_district_id: Number(SHOP_DISTRICT_CODE),
      service_type_id: Number(service_type_id),
      to_district_id: Number(did),
      to_ward_code: wcd,
      weight, length, width, height,
      insurance_value: Number(orderValue || 0),
      coupon: null,
    };

    const response = await axios.post(
      'https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee',
      feePayload,
      { headers: { ...headers, ShopId: GHN_SHOP_ID }, timeout: 8000 }
    );

    feeData = response.data;

    if (feeData?.code !== 200) throw new Error(feeData?.message || 'L·ªói kh√¥ng r√µ khi t√≠nh ph√≠.');

    fee = feeData?.data?.total || 0;
    if (fee === 0) console.warn('[GHN getFee] Ph√≠ = 0 ‚Äì ki·ªÉm tra ƒë·ªãa ch·ªâ/k√≠ch th∆∞·ªõc.');
  } catch (err) {
    console.error('[GHN getFee] L·ªói API /fee:', err?.response?.data || err.message);
    throw new Error(`GHN: L·ªói khi t√≠nh ph√≠: ${err?.response?.data?.message || err.message}`);
  }

  // üîπ B3: ∆Ø·ªõc l∆∞·ª£ng leadTime
  let leadTime = null;
  try {
    const now = Math.floor(Date.now() / 1000);
    const expectedTime = Number(feeData?.data?.expected_delivery_time || 0);

    if (expectedTime > now) {
      const diff = expectedTime - now;
      leadTime = Math.max(1, Math.ceil(diff / 86400));
      console.log(`[GHN getFee] leadTime t·ª´ expected_delivery_time: ${leadTime} ng√†y`);
    }
  } catch (e) {
    console.warn('[GHN getFee] L·ªói x·ª≠ l√Ω expected_delivery_time:', e.message);
  }

  // üîπ Fallback: g·ªçi /leadtime n·∫øu ch∆∞a c√≥
  if (!leadTime) {
    try {
      const leadtimePayload = {
        from_district_id: Number(SHOP_DISTRICT_CODE),
        from_ward_code: SHOP_WARD_CODE,
        to_district_id: Number(did),
        to_ward_code: wcd,
        service_id: Number(actualServiceId),
      };

      const { data: ltData } = await axios.post(
        'https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/leadtime',
        leadtimePayload,
        { headers: { ...headers, ShopId: GHN_SHOP_ID }, timeout: 5000 }
      );

      const seconds = Number(ltData?.data?.leadtime || 0);
      if (seconds > 0) {
        leadTime = Math.max(1, Math.ceil(seconds / 86400));
        console.log(`[GHN getFee] leadTime t·ª´ /leadtime: ${leadTime} ng√†y`);
      }
    } catch (e) {
      console.warn('[GHN getFee] L·ªói khi g·ªçi /leadtime:', e?.response?.data || e.message);
    }
  }

  // üîπ Fallback cu·ªëi c√πng n·∫øu t·∫•t c·∫£ ƒë·ªÅu fail
  if (!leadTime) {
    const fallback = 3;
    leadTime = fallback;
    console.warn(`[GHN getFee] Fallback leadTime: ${fallback} ng√†y`);
  }

  return { fee, leadTime };
}




/* ------------------------------------------------------------------ *
 * 4Ô∏è‚É£ Book Pickup (T·∫°o v·∫≠n ƒë∆°n l·∫•y h√†ng)
 * ------------------------------------------------------------------ */
async function bookPickup(payload) {
  const {
    from_name,
    from_phone,
    from_address,
    from_ward_code,       // ‚úÖ mapping s·∫µn, kh√¥ng c√≤n t·ª´ ID n·ªØa
    from_district_id,     // ‚úÖ mapping s·∫µn, l√† GHN District ID
    to_name,
    to_phone,
    to_address,
    to_ward_code,
    to_district_id,
    weight,
    length,
    width,
    height,
    client_order_code,
    content,
  } = payload;

  // üîÑ L·∫•y service_type_id cho tuy·∫øn v·∫≠n chuy·ªÉn (KH ƒë·∫øn SHOP)
  let serviceTypeId;
  try {
    serviceTypeId = await getDefaultService({
      toProvince: null, // ‚úÖ Kh√¥ng c·∫ßn n·∫øu ch·ªâ d√πng district
      toDistrict: from_district_id, // GHN district code ƒë√£ mapping
    });

    if (!serviceTypeId) {
      throw new Error("Kh√¥ng c√≥ d·ªãch v·ª• GHN kh·∫£ d·ª•ng cho tuy·∫øn l·∫•y h√†ng n√†y.");
    }
  } catch (err) {
    console.error("GHN bookPickup: L·ªói khi l·∫•y serviceTypeId:", err.message);
    throw new Error(`GHN: L·ªói khi x√°c ƒë·ªãnh d·ªãch v·ª• l·∫•y h√†ng: ${err.message}`);
  }

  // üöÄ T·∫°o payload t·∫°o ƒë∆°n h√†ng
  const createOrderPayload = {
    service_type_id: serviceTypeId,
    required_note: 'KHONGCHOXEMHANG',
    payment_type_id: 1,

    from_name,
    from_phone,
    from_address,
    from_ward_code,         // ‚úÖ GHN m√£ x√£
    from_district_id,       // ‚úÖ GHN m√£ huy·ªán

    to_name,
    to_phone,
    to_address,
    to_ward_code,
    to_district_id: Number(to_district_id),

    weight,
    length: Math.max(1, length),
    width: Math.max(1, width),
    height: Math.max(1, height),

    cod_amount: 0,
    client_order_code,
    content,
  };

  console.log('[GHN bookPickup] Create Order Request Payload:', JSON.stringify(createOrderPayload, null, 2));

  try {
    const { data: responseData } = await axios.post(
      'https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/create',
      createOrderPayload,
      {
        headers: {
          'Content-Type': 'application/json',
          Token: GHN_TOKEN,
          ShopId: GHN_SHOP_ID,
        },
        timeout: 10000,
      }
    );

    console.log('[GHN bookPickup] Create Order Response Data:', JSON.stringify(responseData, null, 2));

    if (responseData?.code !== 200 || !responseData.data?.order_code) {
      throw new Error(`GHN: L·ªói t·ª´ API t·∫°o v·∫≠n ƒë∆°n: ${responseData?.message || 'Kh√¥ng r√µ'}`);
    }

    const { order_code, label } = responseData.data;
    return { trackingCode: order_code, labelUrl: label };
  } catch (error) {
    console.error("GHN bookPickup Error:", error?.response?.data || error.message);
    throw new Error("GHN: L·ªói khi t·∫°o ƒë∆°n l·∫•y h√†ng. " + (error?.response?.data?.message || error.message));
  }
}



// Export c√°c h√†m/class c·∫ßn thi·∫øt
module.exports = {
    getDefaultService,
    getFee,
    getGhnCodesFromLocalDb,
    bookPickup, // ‚≠ê ƒê·∫£m b·∫£o h√†m n√†y ƒë∆∞·ª£c export
};
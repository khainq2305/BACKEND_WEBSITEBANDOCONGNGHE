const GHN = require('./drivers/ghnService');
const GHTK = require('./drivers/ghtkService'); // Gi·ªØ nguy√™n n·∫øu b·∫°n c√≥ driver n√†y
const VTP = require('./drivers/vtpService');   // Gi·ªØ nguy√™n n·∫øu b·∫°n c√≥ driver n√†y

// Import c√°c models c·∫ßn thi·∫øt t·ª´ th∆∞ m·ª•c cha
const {
    ShippingProvider,
    ProviderProvince,
    ProviderDistrict,
    ProviderWard,
    Province,
    District,
    Ward,
} = require('../../models');
const { Op } = require('sequelize'); // C·∫ßn Op cho Sequelize queries

// Map shippingProviders.code ‚Üí driver
const drivers = {
    ghn: GHN,
    ghtk: GHTK, // Gi·ªØ nguy√™n
    vtp: VTP,   // Gi·ªØ nguy√™n
    // Th√™m c√°c driver kh√°c n·∫øu c√≥ (v√≠ d·ª•: jnt: require('./drivers/jntService'))
    // X√ìA HO·∫∂C COMMENT D√íNG N√ÄY ƒê·ªÇ B·ªé J&T
    // jnt: require('./drivers/jntService'),
};

/*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * Helpers (ƒê√£ ƒë·ªìng b·ªô v·ªõi h√†m norm trong ghnService.js)
 *‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*/

// H√†m chu·∫©n h√≥a (gi·ªëng h·ªát norm() trong ghnService.js v√† importGhn.js)
const deAccent = t => t.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
const stripProv = t => t.replace(/^(T·ªânh|Tinh|Th√†nh ph·ªë|Thanh pho|TP)\s+/i, '');
const stripDist = t => t.replace(/^(Qu·∫≠n|Quan|Huy·ªán|Huyen|Th·ªã x√£|Thi xa|TP|TX)\s+/i, '');
const stripWard = t => t.replace(/^(Ph∆∞·ªùng|Phuong|X√£|Xa|Th·ªã tr·∫•n|Thi tran)\s+/i, '');
function normalize(str = '') {
    return deAccent(stripDist(stripProv(stripWard(str || ''))))
        .replace(/[^\w\s]/g, ' ')
        .replace(/\s+/g, ' ')
        .trim()
        .toLowerCase();
}

/**
 * Tra m√£ ViettelPost (PROVINCE_ID / DISTRICT_ID / WARDS_ID)
 * t·ª´ id **ho·∫∑c** t√™n n·ªôi b·ªô c·ªßa DB.
 *
 * @param {object} param
 * @param {number|null} param.province ‚Äì id b·∫£ng `provinces` n·ªôi b·ªô
 * @param {number|null} param.district ‚Äì id b·∫£ng `districts` n·ªôi b·ªô
 * @param {number|null} param.ward ‚Äì id b·∫£ng `wards` n·ªôi b·ªô
 * @param {string|null} param.provinceName ‚Äì t√™n t·ªânh n·ªôi b·ªô
 * @param {string|null} param.districtName ‚Äì t√™n huy·ªán n·ªôi b·ªô
 * @param {string|null} param.wardName ‚Äì t√™n x√£ n·ªôi b·ªô
 * @returns {{pvCode:number|null, dtCode:number|null, wdCode:number|null}}
 */
async function mapVtpCodes({
    provinceId,
    districtId,
    wardId,
    provinceName,
    districtName,
    wardName,
}) {
    console.log(`[DEBUG mapVtpCodes] ƒê·∫ßu v√†o: ProvID=${provinceId}, DistID=${districtId}, WardID=${wardId}, ProvName="${provinceName}", DistName="${districtName}", WardName="${wardName}"`);

    let pvCode = null, dtCode = null, wdCode = null;

    /* ----- Tra c·ª©u Province Code c·ªßa VTP ----- */
    let provMapResult = null;
    if (provinceId) {
        provMapResult = await ProviderProvince.findOne({
            where: { providerId: 3, provinceId },
            attributes: ['providerProvinceCode'],
        });
        console.log(`[DEBUG mapVtpCodes] Query Prov by ID ${provinceId}: ${provMapResult ? 'FOUND' : 'NOT FOUND'}, Code: ${provMapResult?.providerProvinceCode || 'N/A'}`);
    }
    if (!provMapResult && provinceName) {
        provMapResult = await ProviderProvince.findOne({
            where: {
                providerId: 3,
                providerProvinceName: normalize(provinceName),
            },
            attributes: ['providerProvinceCode'],
        });
        console.log(`[DEBUG mapVtpCodes] Query Prov by Name "${provinceName}" (Normalized: "${normalize(provinceName)}"): ${provMapResult ? 'FOUND' : 'NOT FOUND'}, Code: ${provMapResult?.providerProvinceCode || 'N/A'}`);
    }
    pvCode = provMapResult?.providerProvinceCode ?? null;

    /* ----- Tra c·ª©u District Code c·ªßa VTP ----- */
    let distMapResult = null;
    if (districtId) {
        distMapResult = await ProviderDistrict.findOne({
            where: { providerId: 3, districtId },
            attributes: ['providerDistrictCode'],
        });
        console.log(`[DEBUG mapVtpCodes] Query Dist by ID ${districtId}: ${distMapResult ? 'FOUND' : 'NOT FOUND'}, Code: ${distMapResult?.providerDistrictCode || 'N/A'}`);
    }
    if (!distMapResult && districtName && pvCode) {
        distMapResult = await ProviderDistrict.findOne({
            where: {
                providerId: 3,
                providerDistrictName: normalize(districtName),
                providerProvinceCode: pvCode,
            },
            attributes: ['providerDistrictCode'],
        });
        console.log(`[DEBUG mapVtpCodes] Query Dist by Name "${districtName}" (Normalized: "${normalize(districtName)}") and ProvCode ${pvCode}: ${distMapResult ? 'FOUND' : 'NOT FOUND'}, Code: ${distMapResult?.providerDistrictCode || 'N/A'}`);
    }
    dtCode = distMapResult?.providerDistrictCode ?? null;

    /* ----- Tra c·ª©u Ward Code c·ªßa VTP (c√≥ th·ªÉ null) ----- */
    let wardMapResult = null;
    if (wardId) {
        wardMapResult = await ProviderWard.findOne({
            where: { providerId: 3, wardId },
            attributes: ['providerWardCode'],
        });
        console.log(`[DEBUG mapVtpCodes] Query Ward by ID ${wardId}: ${wardMapResult ? 'FOUND' : 'NOT FOUND'}, Code: ${wardMapResult?.providerWardCode || 'N/A'}`);
    }
    if (!wardMapResult && wardName && dtCode) {
        wardMapResult = await ProviderWard.findOne({
            where: {
                providerId: 3,
                providerWardName: normalize(wardName),
                providerDistrictCode: dtCode,
            },
            attributes: ['providerWardCode'],
        });
        console.log(`[DEBUG mapVtpCodes] Query Ward by Name "${wardName}" (Normalized: "${normalize(wardName)}") and DistCode ${dtCode}: ${wardMapResult ? 'FOUND' : 'NOT FOUND'}, Code: ${wardMapResult?.providerWardCode || 'N/A'}`);
    }
    wdCode = wardMapResult?.providerWardCode ?? null;

    console.log(`[mapVtpCodes] Mapped codes for VTP: Prov: ${pvCode}, Dist: ${dtCode}, Ward: ${wdCode}`);
    return { pvCode, dtCode, wdCode };
}

/*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * Service class
 *‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*/
class ShippingService {
    /**
     * T√≠nh ph√≠ giao h√†ng & lead-time.
     *
     * @param {object} payload
     * @returns {Promise<{ fee:number, leadTime:number|null }>}
     */
    static async calcFee({
        providerId, toProvince, toDistrict, toWard,
        weight, length, width, height,
        serviceCode = null,
        provinceName = null, districtName = null, wardName = null,
        orderValue = 0, // ‚úÖ Th√™m d√≤ng n√†y
    }) {
        const provider = await ShippingProvider.findByPk(providerId);
        if (!provider || !provider.isActive) {
            console.warn(`[calcFee] H√£ng v·∫≠n chuy·ªÉn ID ${providerId} kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng t·ªìn t·∫°i.`);
            throw new Error('H√£ng v·∫≠n chuy·ªÉn kh√¥ng ho·∫°t ƒë·ªông');
        }

        const driver = drivers[provider.code];
        if (!driver) {
            console.error(`[calcFee] Driver cho h√£ng "${provider.code}" kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.`);
            throw new Error(`Ch∆∞a h·ªó tr·ª£ driver ‚Äú${provider.code}‚Äù`);
        }

        let finalProvince = toProvince, finalDistrict = toDistrict, finalWard = toWard;

        if (provider.code === 'vtp') {
            const { pvCode, dtCode, wdCode } = await mapVtpCodes({
                provinceId: typeof toProvince === 'number' ? toProvince : null,
                districtId: typeof toDistrict === 'number' ? toDistrict : null,
                wardId: typeof toWard === 'number' ? toWard : null,
                provinceName, districtName, wardName,
            });

            if (!pvCode || !dtCode) {
                throw new Error('Kh√¥ng t√¨m th·∫•y m√£ t·ªânh/huy·ªán VTP.');
            }

            finalProvince = pvCode;
            finalDistrict = dtCode;
            finalWard = wdCode;
        }

   let finalService = serviceCode;

if (!finalService && provider.code === 'ghn') {
  finalService = await driver.getDefaultService({
    toDistrict: finalDistrict, // finalDistrict l√∫c n√†y l√† GHN District ID
  });
}

if (!finalService && provider.code === 'vtp') {
  finalService = await driver.getDefaultService({
    toProvince: finalProvince,
    toDistrict: finalDistrict,
  });
}

// C√°c h√£ng kh√°c n·∫øu c·∫ßn getDefaultService th√¨ vi·∫øt th√™m ·ªü ƒë√¢y


        return driver.getFee({
            toProvince: finalProvince,
            toDistrict: finalDistrict,
            toWard: finalWard,
            weight, length, width, height,
            serviceCode: finalService,
              orderValue, // üî• Th√™m d√≤ng n√†y
        });
    }
}

ShippingService.drivers = drivers;

module.exports = ShippingService;